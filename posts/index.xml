<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Mirko Caserta</title>
        <link>https://mirkocaserta.com/posts/</link>
        <description>Recent content in Posts on Mirko Caserta</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Fri, 05 Feb 2021 08:19:00 +0000</lastBuildDate>
        <atom:link href="https://mirkocaserta.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>ðŸ‡®ðŸ‡¹ Esempio di Time Series Data e CompletableFuture in Java</title>
            <link>https://mirkocaserta.com/posts/2021/02/esempio-di-time-series-data-e-completablefuture-in-java/</link>
            <pubDate>Fri, 05 Feb 2021 08:19:00 +0000</pubDate>
            
            <guid>https://mirkocaserta.com/posts/2021/02/esempio-di-time-series-data-e-completablefuture-in-java/</guid>
            <description>Esempio di Time Series Data e CompletableFuture in Java Il codice completo di tutti gli esempi si trova qui.
Come lanciare il programma mvn clean compile verify exec:java Prefazione Supponiamo di voler calcolare un indice di qualitÃ  dell&amp;rsquo;aria basato su due valori:
 temperatura dell&amp;rsquo;aria percentuale di monossido di carbonio nell&amp;rsquo;aria  Dati i seguenti simboli:
   simbolo significato     AQi indice di qualitÃ  dell&amp;rsquo;aria   T temperatura dell&amp;rsquo;aria in gradi Celsius   Tm temperatura massima dell&amp;rsquo;aria in CÂ°   C percentuale di monossido di carbonio nell&amp;rsquo;aria    Possiamo calcolare l&#39;AQi con questa specie di formula:</description>
            <content type="html"><![CDATA[<h1 id="esempio-di-time-series-data-e-completablefuture-in-java">Esempio di Time Series Data e CompletableFuture in Java</h1>
<p>Il codice completo di tutti gli esempi si trova
<a href="https://github.com/mcaserta/time-series-concurrency-example">qui</a>.</p>
<h2 id="come-lanciare-il-programma">Come lanciare il programma</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">mvn clean compile verify exec:java
</code></pre></div><h2 id="prefazione">Prefazione</h2>
<p>Supponiamo di voler calcolare un <em>indice di qualitÃ  dell&rsquo;aria</em> basato
su due valori:</p>
<ul>
<li>temperatura dell&rsquo;aria</li>
<li>percentuale di monossido di carbonio nell&rsquo;aria</li>
</ul>
<p>Dati i seguenti simboli:</p>
<table>
<thead>
<tr>
<th>simbolo</th>
<th>significato</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>AQi</code></td>
<td>indice di qualitÃ  dell&rsquo;aria</td>
</tr>
<tr>
<td><code>T</code></td>
<td>temperatura dell&rsquo;aria in gradi Celsius</td>
</tr>
<tr>
<td><code>Tm</code></td>
<td>temperatura massima dell&rsquo;aria in CÂ°</td>
</tr>
<tr>
<td><code>C</code></td>
<td>percentuale di monossido di carbonio nell&rsquo;aria</td>
</tr>
</tbody>
</table>
<p>Possiamo calcolare l'<code>AQi</code> con questa specie di formula:</p>
<!-- raw HTML omitted -->
<p><img src="/images/posts/air-quality-formula.png" alt="formula della qualitÃ  dell&rsquo;aria"></p>
<p><strong>DISCLAIMER:</strong> questa formula non Ã¨ in alcun modo scientifica ed Ã¨ da
intendersi esclusivamente a scopo educativo. Non voglio che
ambientalisti e veri scienziati mi vengano a cercare a casa con formule
matematiche e accuse di stregoneria. E poi ho visto una scusa per una
fantastica equazione in LaTeX e ne ho approfittato, per motivi estetici
e perchÃ© mi fa sembrare intelligente, cosa che certamente non
sono<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>CiÃ² che la formula prova a esprimere Ã¨ che al salire di temperatura e
percentuale di monossido di carbonio, la qualitÃ  dell&rsquo;aria decresce.
SÃ¬, tutto ciÃ² Ã¨ totalmente anti-scientifico ma vedrete che ha senso ai
fini della mia argomentazione.</p>
<p>Assumiamo una temperatura massima di 40CÂ°. Quindi, ad esempio:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ bc -l
bc 1.06
Copyright 1991-1994, 1997, 1998, <span style="color:#ae81ff">2000</span> Free Software Foundation, Inc.
This is free software with ABSOLUTELY NO WARRANTY.
For details type <span style="color:#e6db74">&#39;warranty&#39;</span>.
t<span style="color:#f92672">=</span>60; c<span style="color:#f92672">=</span>100; tm<span style="color:#f92672">=</span>40; <span style="color:#f92672">(((</span>t * 100<span style="color:#f92672">)</span> / tm<span style="color:#f92672">)</span> + c<span style="color:#f92672">)</span> / <span style="color:#ae81ff">2</span>
125.00000000000000000000
t<span style="color:#f92672">=</span>60; c<span style="color:#f92672">=</span>50; tm<span style="color:#f92672">=</span>40; <span style="color:#f92672">(((</span>t * 100<span style="color:#f92672">)</span> / tm<span style="color:#f92672">)</span> + c<span style="color:#f92672">)</span> / <span style="color:#ae81ff">2</span>
100.00000000000000000000
t<span style="color:#f92672">=</span>40; c<span style="color:#f92672">=</span>50; tm<span style="color:#f92672">=</span>40; <span style="color:#f92672">(((</span>t * 100<span style="color:#f92672">)</span> / tm<span style="color:#f92672">)</span> + c<span style="color:#f92672">)</span> / <span style="color:#ae81ff">2</span>
75.00000000000000000000
t<span style="color:#f92672">=</span>40; c<span style="color:#f92672">=</span>10; tm<span style="color:#f92672">=</span>40; <span style="color:#f92672">(((</span>t * 100<span style="color:#f92672">)</span> / tm<span style="color:#f92672">)</span> + c<span style="color:#f92672">)</span> / <span style="color:#ae81ff">2</span>
55.00000000000000000000
t<span style="color:#f92672">=</span>20; c<span style="color:#f92672">=</span>10; tm<span style="color:#f92672">=</span>40; <span style="color:#f92672">(((</span>t * 100<span style="color:#f92672">)</span> / tm<span style="color:#f92672">)</span> + c<span style="color:#f92672">)</span> / <span style="color:#ae81ff">2</span>
30.00000000000000000000
t<span style="color:#f92672">=</span>10; c<span style="color:#f92672">=</span>5; tm<span style="color:#f92672">=</span>40; <span style="color:#f92672">(((</span>t * 100<span style="color:#f92672">)</span> / tm<span style="color:#f92672">)</span> + c<span style="color:#f92672">)</span> / <span style="color:#ae81ff">2</span>
15.00000000000000000000
t<span style="color:#f92672">=</span>10; c<span style="color:#f92672">=</span>0.5; tm<span style="color:#f92672">=</span>40; <span style="color:#f92672">(((</span>t * 100<span style="color:#f92672">)</span> / tm<span style="color:#f92672">)</span> + c<span style="color:#f92672">)</span> / <span style="color:#ae81ff">2</span>
12.75000000000000000000
</code></pre></div><p>Da questo possiamo derivare la seguente tabella totalmente
anti-scientifica:</p>
<table>
<thead>
<tr>
<th>AQi</th>
<th>significato</th>
</tr>
</thead>
<tbody>
<tr>
<td>da   125  a âˆž</td>
<td>morte orribile</td>
</tr>
<tr>
<td>da   100  a 125</td>
<td>morte dolorosa</td>
</tr>
<tr>
<td>da    75  a 100</td>
<td>morte</td>
</tr>
<tr>
<td>da    55  a 75</td>
<td>Ã¨ accettabile<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></td>
</tr>
<tr>
<td>da    30  a 55</td>
<td>va bene cosÃ¬<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></td>
</tr>
<tr>
<td>da    15  a 30</td>
<td>si sta bene</td>
</tr>
<tr>
<td>da 12.75  a 15</td>
<td>freschetto</td>
</tr>
<tr>
<td>da    -âˆž  a 12.75</td>
<td>benvenuto a Yakutsk, probabilmente</td>
</tr>
</tbody>
</table>
<h2 id="service-provider">Service provider</h2>
<p>Supponiamo di avere dei servizi internet che espongano dati di
monitoring riguardo temperatura e livelli di monossido di carbonio.
Questi servizi potrebbero esporre un&rsquo;api che ci dÃ  una serie di dati di
tipo time series<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.</p>
<p>Quindi, ad esempio, potremmo chiamare un servizio di monitoring della
temperatura, e il servizio ci risponderebbe con una serie di dati time
series come questi:</p>
<table>
<thead>
<tr>
<th>timestamp</th>
<th>valore</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>2021-01-20T08:00:00Z</code></td>
<td><code>10.1</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:02:00Z</code></td>
<td><code>10.3</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:05:00Z</code></td>
<td><code>10.7</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:00Z</code></td>
<td><code>10.9</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:19Z</code></td>
<td><code>11.0</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:42Z</code></td>
<td><code>11.1</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:09:00Z</code></td>
<td><code>11.3</code></td>
</tr>
</tbody>
</table>
<p>Un servizio di monitoring della percentuale di monossido di carbonio
potrebbe invece rispondere con dati simili:</p>
<table>
<thead>
<tr>
<th>timestamp</th>
<th>valore</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>2021-01-20T08:01:00Z</code></td>
<td><code>2.0</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:02:00Z</code></td>
<td><code>2.3</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:00Z</code></td>
<td><code>2.8</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:07:00Z</code></td>
<td><code>2.9</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:08:00Z</code></td>
<td><code>3.3</code></td>
</tr>
</tbody>
</table>
<p>Ti prego di notare che ho ordinato i dati per timestamp in modo da
renderli un po' piÃ¹ leggibili, ma non dovresti fare assunzioni sul tipo
di ordinamento dei dati tornati da un provider esterno. Non che ciÃ² sia
di alcuna importanza perchÃ©&hellip;</p>
<h1 id="lalgoritmo">L&rsquo;algoritmo</h1>
<p>&hellip;il nostro algoritmo ora richiede di:</p>
<ol>
<li>concatenare i dati di temperatura e percentuale di monossido di
carbonio</li>
<li>ordinare per timestamp</li>
</ol>
<table>
<thead>
<tr>
<th>id</th>
<th>timestamp</th>
<th>valore</th>
<th>tipo</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>2021-01-20T08:00:00Z</code></td>
<td><code>10.1</code></td>
<td><code>T</code></td>
</tr>
<tr>
<td><code>2</code></td>
<td><code>2021-01-20T08:01:00Z</code></td>
<td><code> 2.0</code></td>
<td><code>C</code></td>
</tr>
<tr>
<td><code>3</code></td>
<td><code>2021-01-20T08:02:00Z</code></td>
<td><code>10.3</code></td>
<td><code>T</code></td>
</tr>
<tr>
<td><code>4</code></td>
<td><code>2021-01-20T08:02:00Z</code></td>
<td><code> 2.3</code></td>
<td><code>C</code></td>
</tr>
<tr>
<td><code>5</code></td>
<td><code>2021-01-20T08:05:00Z</code></td>
<td><code>10.7</code></td>
<td><code>T</code></td>
</tr>
<tr>
<td><code>6</code></td>
<td><code>2021-01-20T08:06:00Z</code></td>
<td><code>10.9</code></td>
<td><code>T</code></td>
</tr>
<tr>
<td><code>7</code></td>
<td><code>2021-01-20T08:06:00Z</code></td>
<td><code> 2.8</code></td>
<td><code>C</code></td>
</tr>
<tr>
<td><code>8</code></td>
<td><code>2021-01-20T08:06:19Z</code></td>
<td><code>11.0</code></td>
<td><code>T</code></td>
</tr>
<tr>
<td><code>9</code></td>
<td><code>2021-01-20T08:06:42Z</code></td>
<td><code>11.1</code></td>
<td><code>T</code></td>
</tr>
<tr>
<td><code>10</code></td>
<td><code>2021-01-20T08:07:00Z</code></td>
<td><code> 2.9</code></td>
<td><code>C</code></td>
</tr>
<tr>
<td><code>11</code></td>
<td><code>2021-01-20T08:08:00Z</code></td>
<td><code> 3.3</code></td>
<td><code>C</code></td>
</tr>
<tr>
<td><code>12</code></td>
<td><code>2021-01-20T08:09:00Z</code></td>
<td><code>11.3</code></td>
<td><code>T</code></td>
</tr>
</tbody>
</table>
<blockquote>
<p>tipo: T sta per temperatura e C per percentuale di monossido di carbonio</p>
</blockquote>
<p>Il nostro compito ora Ã¨ di scandire i dati, cominciando dall&rsquo;inizio,
una riga alla volta, computando l&rsquo;indice di qualitÃ  dell&rsquo;aria man mano
che andiamo avanti, un passo per volta.</p>
<p>La prima cosa da notare qui Ã¨ che per calcolare la formula del nostro
<code>AQi</code>, abbiamo bisogno di avere entrambi i valori per <code>T</code> e <code>C</code>. In
altre parole, il primo punto in cui possiamo applicare la nostra
formula Ã¨ quello con id <code>2</code>, dal momento che abbiamo un valore per <code>T</code>
nell&rsquo;id <code>1</code> e un valore per <code>C</code> nell&rsquo;id <code>2</code>. Quindi prendiamo i nostri
valori (<code>10.1</code> per <code>T</code> e <code>2.0</code> per <code>C</code>), applichiamo la formula, ed
abbiamo un primo valore per <code>AQi</code> di <code>13.625</code> che associamo con il
timestamp nell&rsquo;id <code>2</code>, poichÃ© quello Ã¨ il momento cui si riferisce la
nostra computazione. La nostra prima entry di <code>AQi</code> nella serie
risultante deve essere cosÃ¬:</p>
<table>
<thead>
<tr>
<th>timestamp</th>
<th>valore</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>2021-01-20T08:01:00Z</code></td>
<td><code>13.625</code></td>
</tr>
</tbody>
</table>
<p>D&rsquo;ora in poi, la nostra formula puÃ² essere applicata per ogni elemento
rimanente nella serie, tenendo presente che dobbiamo correlare ogni
valore con il valore piÃ¹ recente dell&rsquo;altro tipo.  In altre parole:</p>
<table>
<thead>
<tr>
<th>per l&rsquo;id</th>
<th>prendi i valori dagli id</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>2</code></td>
<td><code>1, 2</code></td>
</tr>
<tr>
<td><code>3</code></td>
<td><code>2, 3</code></td>
</tr>
<tr>
<td><code>4</code></td>
<td><code>3, 4</code></td>
</tr>
<tr>
<td><code>5</code></td>
<td><code>4, 5</code></td>
</tr>
<tr>
<td><code>6</code></td>
<td><code>4, 6</code></td>
</tr>
<tr>
<td><code>7</code></td>
<td><code>6, 7</code></td>
</tr>
<tr>
<td><code>8</code></td>
<td><code>7, 8</code></td>
</tr>
<tr>
<td><code>9</code></td>
<td><code>7, 9</code></td>
</tr>
<tr>
<td><code>10</code></td>
<td><code>9, 10</code></td>
</tr>
<tr>
<td><code>11</code></td>
<td><code>9, 11</code></td>
</tr>
<tr>
<td><code>12</code></td>
<td><code>11, 12</code></td>
</tr>
</tbody>
</table>
<p>Puoi pensare a questo tipo di movimento come a una <a href="https://towardsdatascience.com/time-series-analysis-resampling-shifting-and-rolling-f5664ddef77e">rolling time
window</a>
poichÃ© hai una finestra che si muove nel tempo focalizzandosi sui dati
piÃ¹ recenti per le nostre specifiche misure di <code>T</code> e <code>C</code> ad ogni
passo<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>.</p>
<h2 id="rolling-time-window">Rolling Time Window</h2>
<p>Vai avanti, scrolla in basso. Dovresti vederla.</p>
<pre><code>/===================================================================================\
|                   Step 01 :: T = 10.1, C = 2.0 :: AQi = 13.625                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
     |&lt;----------&gt;|                                                                


/===================================================================================\
|                   Step 02 :: T = 10.3, C = 2.0 :: AQi = 13.875                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
            |&lt;----------&gt;|

/===================================================================================\
|                   Step 03 :: T = 10.3, C = 2.3 :: AQi = 14.025                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
                  |&lt;----------&gt;|

/===================================================================================\
|                   Step 04 :: T = 10.7, C = 2.3 :: AQi = 14.525                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
                         |&lt;----------&gt;|

/===================================================================================\
|                   Step 05 :: T = 10.9, C = 2.3 :: AQi = 14.775                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
                         |&lt;-----------------&gt;|

/===================================================================================\
|                   Step 06 :: T = 10.9, C = 2.8 :: AQi = 15.025                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
                                      |&lt;----------&gt;|

/===================================================================================\
|                   Step 07 :: T = 11.0, C = 2.8 :: AQi = 15.150                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
                                             |&lt;----------&gt;|

/===================================================================================\
|                   Step 08 :: T = 11.1, C = 2.8 :: AQi = 15.275                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
                                             |&lt;-----------------&gt;|

/===================================================================================\
|                   Step 09 :: T = 11.1, C = 2.9 :: AQi = 15.325                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
                                                          |&lt;----------&gt;|

/===================================================================================\
|                   Step 10 :: T = 11.1, C = 3.3 :: AQi = 15.525                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
                                                          |&lt;----------------&gt;|

/===================================================================================\
|                   Step 11 :: T = 11.3, C = 3.3 :: AQi = 15.775                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
                                                                       |&lt;----------&gt;|
</code></pre><p>Dato quanto sopra, la nostra time series completa per l'<code>AQi</code> Ã¨:</p>
<table>
<thead>
<tr>
<th>timestamp</th>
<th>valore</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>2021-01-20T08:01:00Z</code></td>
<td><code>13.625</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:02:00Z</code></td>
<td><code>13.875</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:02:00Z</code></td>
<td><code>14.025</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:05:00Z</code></td>
<td><code>14.525</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:00Z</code></td>
<td><code>14.775</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:00Z</code></td>
<td><code>15.025</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:19Z</code></td>
<td><code>15.150</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:42Z</code></td>
<td><code>15.275</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:07:00Z</code></td>
<td><code>15.325</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:08:00Z</code></td>
<td><code>15.525</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:09:00Z</code></td>
<td><code>15.775</code></td>
</tr>
</tbody>
</table>
<p>Se hai guardato attentamente, potresti aver notato che abbiamo un paio
di timestamp duplicati nei risultati, nello specifico
<code>2021-01-20T08:02:00Z</code> e <code>2021-01-20T08:06:00Z</code>. Questi rappresentano
un paradosso temporale poichÃ© sembra che il nostro <code>AQi</code> abbia due
diversi valori allo stesso istante.</p>
<p><img src="/images/posts/i-find-your-lack-of-logic-disturbing.jpg" alt="I find your lack of logic disturbing"></p>
<p>Entrambi sappiamo che questi dati finiranno su una pagina web. Non
vorrai certo che uno di quegli sviluppatori hipster del frontend ci
faccia notare una mancanza di logica o, peggio, una inconsistenza nei
nostri dati, vero?</p>
<p>Ne ero certo. Dunque, la mia idea Ã¨ che possiamo tranquillamente
scartare la prima entry di un timestamp duplicato poichÃ© si riferisce a
un calcolo con dati vecchi. PerchÃ©? Be', considera i valori del primo
timestamp duplicato: <code>2021-01-20T08:02:00Z</code>. La prima volta che abbiamo
calcolato l'<code>AQi</code>, abbiamo preso i dati dagli id <code>2</code> e <code>3</code> e l&rsquo;id <code>2</code>
si riferisce a un timestamp precedente, nello specifico
<code>2021-01-20T08:01:00Z</code>. La seconda volta che abbiamo calcolato l'<code>AQi</code>,
abbiamo usato i dati dagli id <code>3</code> and <code>4</code>, che si riferiscono entrambi
al timestamp <code>2021-01-20T08:02:00Z</code>, quindi il risultato di questa
computazione Ã¨ piÃ¹ rilevante del precedente per il quale abbiamo
prodotto lo stesso timestamp di <code>2021-01-20T08:02:00Z</code>.</p>
<p>La stessa cosa si applica all'<code>AQi</code> con timestamp
<code>2021-01-20T08:06:00Z</code> poichÃ© la prima computazione stava usando gli id
<code>4</code> e <code>6</code> mentre la seconda stava considerando gli id <code>6</code> e <code>7</code> che
sono piÃ¹ freschi del timestamp nell&rsquo;id <code>4</code>.</p>
<p>Quindi cancelliamo un paio di righe e il risultato pulito dovrebbe
essere questo:</p>
<table>
<thead>
<tr>
<th>timestamp</th>
<th>valore</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>2021-01-20T08:01:00Z</code></td>
<td><code>13.625</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:02:00Z</code></td>
<td><code>14.025</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:05:00Z</code></td>
<td><code>14.525</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:00Z</code></td>
<td><code>15.025</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:19Z</code></td>
<td><code>15.150</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:42Z</code></td>
<td><code>15.275</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:07:00Z</code></td>
<td><code>15.325</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:08:00Z</code></td>
<td><code>15.525</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:09:00Z</code></td>
<td><code>15.775</code></td>
</tr>
</tbody>
</table>
<p>Proprio come un&rsquo;equazione Ã¨ un&rsquo;ottima scusa per rispolverare un po' di
<a href="https://www.latex-project.org/">LaTeX</a>, una buona serie di dati
temporali Ã¨ un eccellente candidato per
<a href="http://www.gnuplot.info/">gnuplot</a>.</p>
<p><img src="/images/posts/plot-output.png" alt="plot dei dati fin qui"></p>
<p>I dati nel mondo reale sono naturalmente molto piÃ¹ caotici di cosÃ¬ e
potresti voler normalizzare il risultato usando un intervallo temporale
arbitrario, ad esempio un minuto:</p>
<table>
<thead>
<tr>
<th>timestamp</th>
<th>valore</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>2021-01-20T08:01:00Z</code></td>
<td><code>13.625</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:02:00Z</code></td>
<td><code>14.025</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:03:00Z</code></td>
<td><code>14.025</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:04:00Z</code></td>
<td><code>14.025</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:05:00Z</code></td>
<td><code>14.525</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:00Z</code></td>
<td><code>15.025</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:07:00Z</code></td>
<td><code>15.325</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:08:00Z</code></td>
<td><code>15.525</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:09:00Z</code></td>
<td><code>15.775</code></td>
</tr>
</tbody>
</table>
<p><img src="/images/posts/plot-output-normalized.png" alt="plot dei dati normalizzati"></p>
<p>Ha senso? Spero proprio di sÃ¬.</p>
<p><img src="/images/posts/yes.gif" alt="sÃ¬"></p>
<h2 id="scriviamo-il-codice">Scriviamo il codice</h2>
<p>Scriviamo un po' di codice. Prima di tutto, definiamo un&rsquo;interfaccia
per il nostro calcolatore di <code>AQi</code>, cosÃ¬ che poi possiamo fornirne
diverse implementazioni.</p>
<p>Il codice di questa interfaccia puÃ² essere visto
<a href="https://github.com/mcaserta/time-series-concurrency-example/blob/master/src/main/java/com/mirkocaserta/example/AirQualityIndexCalculator.java">qui</a>.</p>
<p>L&rsquo;interfaccia Ã¨ un posto conveniente dove implementare la formula
dell'<code>AQi</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">double</span> <span style="color:#a6e22e">airQualityIndex</span><span style="color:#f92672">(</span><span style="color:#66d9ef">double</span> temperature<span style="color:#f92672">,</span> <span style="color:#66d9ef">double</span> carbonMonoxidePercentage<span style="color:#f92672">,</span> <span style="color:#66d9ef">double</span> maxTemperature<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">(((</span>temperature <span style="color:#f92672">*</span> 100<span style="color:#f92672">)</span> <span style="color:#f92672">/</span> maxTemperature<span style="color:#f92672">)</span> <span style="color:#f92672">+</span> carbonMonoxidePercentage<span style="color:#f92672">)</span> <span style="color:#f92672">/</span> 2<span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Questo metodo prende una temperatura, una percentuale di monossido di
carbonio, una temperatura massima e torna l'<code>AQi</code>. Bene.</p>
<p>La parte interessante perÃ² Ã¨ in questo metodo:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">calculate</span><span style="color:#f92672">(</span>List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;</span> temperatures<span style="color:#f92672">,</span> List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;</span> carbonMonoxidePercentages<span style="color:#f92672">);</span>
</code></pre></div><p>Questo ci dice che il metodo <code>calculate</code> prende due liste di
<code>TimeValue</code>: la prima Ã¨ una lista di temperature e l&rsquo;altra Ã¨ una lista
di percentuali di monossido di carbonio. Quindi ritorna una lista di
<code>TimeValue</code>, solo che questa volta la lista rappresenta gli indici di
qualitÃ  dell&rsquo;aria.</p>
<p>Cos&rsquo;Ã¨ un <code>TimeValue</code>? Possiamo vedere la sua definizione
<a href="https://github.com/mcaserta/time-series-concurrency-example/blob/c5b4574a40be0a818aba1513aaef7cc9d2a41d2b/src/main/java/com/mirkocaserta/example/TimeValue.java#L7">qui</a>.
Nonostante tutto ciÃ² sembri orribilmente complicato per via della
verbositÃ  del linguaggio Java e alcuni dettagli di implementazione,
puoi pensare a un <code>TimeValue</code> come un modo comodo di rappresentare un
<code>Instant</code> nel tempo ed il suo valore associato. Niente di chÃ©, davvero.</p>
<h2 id="scrivere-codice-come-fosse-il-1984">Scrivere codice come fosse il 1984</h2>
<p>Ora che abbiamo un semplice framework per i nostri calcoli, scriviamo
una prima implementazione usando uno stile <em>vecchia scuola</em>. Il codice
completo Ã¨
<a href="https://github.com/mcaserta/time-series-concurrency-example/blob/master/src/main/java/com/mirkocaserta/example/OldSchoolAirQualityIndexCalculator.java">qui</a>.
Diamogli un&rsquo;occhiata.</p>
<p>Il nostro calcolatore prende la temperatura massima nel costruttore e
ne immagazina il valore nella costante d&rsquo;istanza <code>maxTemperature</code>
poichÃ© ci servirÃ  dopo quando invocheremo la funzione per l'<code>AQi</code>.</p>
<p>Il nostro metodo <code>calculate</code> deve iniziare con questi due step:</p>
<ol>
<li>concatenare i dati di temperatura e percentuale di monossido di
carbonio in una singola struttura dati</li>
<li>ordinare il risultato per timestamp</li>
</ol>
<p>Il primo passo Ã¨ implementato in questo blocco di codice:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#75715e">// key = time value type (C = carbonMonoxidePercentage, T = temperature)
</span><span style="color:#75715e">// concatenated with the timestamp as a string
</span><span style="color:#75715e"></span>Map<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> TimeValue<span style="color:#f92672">&gt;</span> timeValuesByType <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;&gt;();</span>

<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>TimeValue temperature <span style="color:#f92672">:</span> temperatures<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    timeValuesByType<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;T&#34;</span><span style="color:#f92672">.</span><span style="color:#a6e22e">concat</span><span style="color:#f92672">(</span>temperature<span style="color:#f92672">.</span><span style="color:#a6e22e">ts</span><span style="color:#f92672">()),</span> temperature<span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>TimeValue carbonMonoxidePercentage <span style="color:#f92672">:</span> carbonMonoxidePercentages<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    timeValuesByType<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;C&#34;</span><span style="color:#f92672">.</span><span style="color:#a6e22e">concat</span><span style="color:#f92672">(</span>carbonMonoxidePercentage<span style="color:#f92672">.</span><span style="color:#a6e22e">ts</span><span style="color:#f92672">()),</span> carbonMonoxidePercentage<span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>La chiave nella nostra variabile <code>timeValuesByType</code> Ã¨ una
concatenazione in stringa della lettera <code>T</code> per temperatura o <code>C</code> per
percentuale di monossido di carbonio, seguita dal timestamp. Dobbiamo
fare ciÃ² per poter poi distinguere tra i due tipi di dato piÃ¹ avanti.
Le stringhe nella chiave avranno questo aspetto:
<code>T2021-02-03T08:00:00.000Z</code>.</p>
<p>L&rsquo;ordinamento Ã¨ realizzato in questo blocco:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Map<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> TimeValue<span style="color:#f92672">&gt;</span> timeValuesByTypeSortedByTimestamp <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LinkedHashMap<span style="color:#f92672">&lt;&gt;();</span>
List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> keysSortedByTimestamp <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;(</span>timeValuesByType<span style="color:#f92672">.</span><span style="color:#a6e22e">keySet</span><span style="color:#f92672">());</span>
keysSortedByTimestamp<span style="color:#f92672">.</span><span style="color:#a6e22e">sort</span><span style="color:#f92672">(</span>comparing<span style="color:#f92672">(</span>s <span style="color:#f92672">-&gt;</span> timeValuesByType<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>s<span style="color:#f92672">).</span><span style="color:#a6e22e">timestamp</span><span style="color:#f92672">()));</span>

<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>String key <span style="color:#f92672">:</span> keysSortedByTimestamp<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    timeValuesByTypeSortedByTimestamp<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>key<span style="color:#f92672">,</span> timeValuesByType<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>key<span style="color:#f92672">));</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Questo Ã¨ solo il modo supercomplicato di Java per ordinare la nostra
mappa in base al timestamp che abbiamo nei valori della mappa stessa.
Dichiariamo una mappa <code>timeValuesByTypeSortedByTimestamp</code>, implementata
da una <code>LinkedHashMap</code> poichÃ© vogliamo preservare l&rsquo;ordine di
iterazione delle entry della mappa.  Poi inglobiamo tutte le chiavi
della nostra mappa originaria <code>timeValuesByType</code> in un ArrayList dato
che abbiamo bisogno di una <code>List</code> per poterci invocare <code>sort</code>.  La
funzione di comparazione che passiamo a <code>sort</code> pesca il timestamp
dell&rsquo;entry relativa nella mappa originale che abbiamo chiamato
<code>timeValuesByType</code>.  Quindi iteriamo <code>keysSortedByTimestamp</code>,
aggiungendo entry alla nostra mappa
<code>timeValuesByTypeSortedByTimestamp</code>.</p>
<p>Ora dichiariamo una mappa per i risultati dei nostri calcoli dell'<code>AQi</code>
e un paio di variabili che ci serviranno dopo:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Map<span style="color:#f92672">&lt;</span>Instant<span style="color:#f92672">,</span> Double<span style="color:#f92672">&gt;</span> airQualityIndexMap <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;&gt;();</span>
TimeValue lastTemperature <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
TimeValue lastCarbonMonoxidePercentage <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</code></pre></div><p>Qui inizia la parte divertente. Cicliamo attraverso le entry della
mappa nella nostra variabile <code>timeValuesByTypeSortedByTimestamp</code>
precedentemente definita.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>Map<span style="color:#f92672">.</span><span style="color:#a6e22e">Entry</span><span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> TimeValue<span style="color:#f92672">&gt;</span> entry <span style="color:#f92672">:</span> timeValuesByTypeSortedByTimestamp<span style="color:#f92672">.</span><span style="color:#a6e22e">entrySet</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
    <span style="color:#f92672">...</span>
</code></pre></div><p>Sappiamo che se la chiave inizia con una <code>T</code>, abbiamo un valore di
temperatura e, in tal caso lo immagazziniamo nella variabile
<code>lastTemperature</code>. Altrimenti, il valore deve essere di tipo <code>C</code> per
carbonio, e quindi facciamo la stessa cosa per la variabile
<code>lastCarbonMonoxidePercentage</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>entry<span style="color:#f92672">.</span><span style="color:#a6e22e">getKey</span><span style="color:#f92672">().</span><span style="color:#a6e22e">startsWith</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;T&#34;</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
    lastTemperature <span style="color:#f92672">=</span> entry<span style="color:#f92672">.</span><span style="color:#a6e22e">getValue</span><span style="color:#f92672">();</span>
<span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>entry<span style="color:#f92672">.</span><span style="color:#a6e22e">getKey</span><span style="color:#f92672">().</span><span style="color:#a6e22e">startsWith</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;C&#34;</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
    lastCarbonMonoxidePercentage <span style="color:#f92672">=</span> entry<span style="color:#f92672">.</span><span style="color:#a6e22e">getValue</span><span style="color:#f92672">();</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>A questo punto, se abbiamo un valore sia per <code>T</code> che per <code>C</code>, possiamo
procedere a calcolare il nostro <code>AQi</code> e memorizzare il suo valore nella
variabile <code>airQualityIndexMap</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>lastTemperature <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">&amp;&amp;</span> lastCarbonMonoxidePercentage <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    airQualityIndexMap<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>
        mostRecent<span style="color:#f92672">(</span>lastTemperature<span style="color:#f92672">.</span><span style="color:#a6e22e">timestamp</span><span style="color:#f92672">(),</span> lastCarbonMonoxidePercentage<span style="color:#f92672">.</span><span style="color:#a6e22e">timestamp</span><span style="color:#f92672">()),</span>
        airQualityIndex<span style="color:#f92672">(</span>lastTemperature<span style="color:#f92672">.</span><span style="color:#a6e22e">value</span><span style="color:#f92672">(),</span> lastCarbonMonoxidePercentage<span style="color:#f92672">.</span><span style="color:#a6e22e">value</span><span style="color:#f92672">(),</span> maxTemperature<span style="color:#f92672">)</span>
    <span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Stiamo prendendo il timestamp piÃ¹ recente tra i due <code>TimeValue</code> usando
una funzioncina di aiuto che abbiamo definito precedentemente
nell&rsquo;interfaccia del calcolatore.</p>
<p>Un effetto collaterale desiderato dell&rsquo;usare una mappa per questa
struttura dati Ã¨ che, quando inseriamo un nuovo valore per un timestamp
esistente, la entry viene sovrascritta dal piÃ¹ recente. Questo risolve
il nostro problema dei timestamp duplicati.</p>
<p>Alla fine del ciclo, i nostri risultati sono quasi pronti. Dobbiamo
solo ordinarli di nuovo per timestamp e ritornare i valori come una
<code>List</code> di <code>TimeValue</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">List<span style="color:#f92672">&lt;</span>Instant<span style="color:#f92672">&gt;</span> keys <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;(</span>airQualityIndexMap<span style="color:#f92672">.</span><span style="color:#a6e22e">keySet</span><span style="color:#f92672">());</span>
keys<span style="color:#f92672">.</span><span style="color:#a6e22e">sort</span><span style="color:#f92672">(</span>Instant<span style="color:#f92672">::</span>compareTo<span style="color:#f92672">);</span>
List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;</span> results <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>

<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>Instant key <span style="color:#f92672">:</span> keys<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    results<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>TimeValue<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span>key<span style="color:#f92672">,</span> airQualityIndexMap<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>key<span style="color:#f92672">)));</span>
<span style="color:#f92672">}</span>
</code></pre></div><h2 id="eleganza-funzionale">Eleganza funzionale</h2>
<p>Possiamo fare meglio di cosÃ¬? Certo. Usiamo un&rsquo;arma elegante per tempi
piÃ¹ civilizzati: la programmazione funzionale. Il nostro
<a href="https://github.com/mcaserta/time-series-concurrency-example/blob/master/src/main/java/com/mirkocaserta/example/FunctionalAirQualityIndexCalculator.java">FunctionalAirQualityIndexCalculator</a>
Ã¨ ridotto quasi all&rsquo;osso, ma solo perchÃ© la logica principale dietro i
calcoli ora si trova
nell'<a href="https://github.com/mcaserta/time-series-concurrency-example/blob/master/src/main/java/com/mirkocaserta/example/AirQualityIndexCollector.java">AirQualityIndexCollector</a>.</p>
<p>Il nostro calcolatore Ã¨ molto piÃ¹ semplice ora. La prima parte Ã¨ un po'
convoluta quindi guardiamola per prima:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">List<span style="color:#f92672">&lt;</span>TypedTimeValue<span style="color:#f92672">&gt;</span> timeSeries <span style="color:#f92672">=</span> Stream<span style="color:#f92672">.</span><span style="color:#a6e22e">concat</span><span style="color:#f92672">(</span>
   temperatures<span style="color:#f92672">.</span><span style="color:#a6e22e">stream</span><span style="color:#f92672">().</span><span style="color:#a6e22e">map</span><span style="color:#f92672">(</span>e <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">new</span> TypedTimeValue<span style="color:#f92672">(</span>TypedTimeValue<span style="color:#f92672">.</span><span style="color:#a6e22e">Type</span><span style="color:#f92672">.</span><span style="color:#a6e22e">T</span><span style="color:#f92672">,</span> e<span style="color:#f92672">)),</span>
   carbonMonoxidePercentages<span style="color:#f92672">.</span><span style="color:#a6e22e">stream</span><span style="color:#f92672">().</span><span style="color:#a6e22e">map</span><span style="color:#f92672">(</span>e <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">new</span> TypedTimeValue<span style="color:#f92672">(</span>TypedTimeValue<span style="color:#f92672">.</span><span style="color:#a6e22e">Type</span><span style="color:#f92672">.</span><span style="color:#a6e22e">C</span><span style="color:#f92672">,</span> e<span style="color:#f92672">))</span>
<span style="color:#f92672">).</span><span style="color:#a6e22e">collect</span><span style="color:#f92672">(</span>Collectors<span style="color:#f92672">.</span><span style="color:#a6e22e">toUnmodifiableList</span><span style="color:#f92672">());</span>
</code></pre></div><p>Ci sono diversi pattern funzionali al lavoro qui:</p>
<ul>
<li>
<p>i dati di temperatura e percentuale di monossido di carbonio sono
trasmessi e mappati in un contenitore in modo da poter poi capire se
il dato che stiamo guardando Ã¨ di tipo <code>T</code> o <code>C</code></p>
</li>
<li>
<p>i due stream risultanti sono concatenati usando <code>Stream.concat</code></p>
</li>
<li>
<p>alla fine collezioniamo lo stream concatenato in una
<code>List&lt;TypedTimeValue&gt;</code> non modificabile</p>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">return</span> timeSeries<span style="color:#f92672">.</span><span style="color:#a6e22e">stream</span><span style="color:#f92672">().</span><span style="color:#a6e22e">parallel</span><span style="color:#f92672">()</span>
    <span style="color:#f92672">.</span><span style="color:#a6e22e">collect</span><span style="color:#f92672">(</span>AirQualityIndexCollector<span style="color:#f92672">.</span><span style="color:#a6e22e">toUnmodifiableList</span><span style="color:#f92672">(</span>maxTemperature<span style="color:#f92672">));</span>
</code></pre></div><p>La variabile <code>timeSeries</code> Ã¨ quindi trasmessa in parallelo in un
collettore che fa il lavoro sporco e ritorna una <code>List&lt;TimeValue&gt;</code> non
modificabile con gli indici di qualitÃ  dell&rsquo;aria.</p>
<p>Diamo un&rsquo;occhiata al collettore.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AirQualityIndexCollector</span>
        <span style="color:#66d9ef">implements</span> Collector<span style="color:#f92672">&lt;</span>TypedTimeValue<span style="color:#f92672">,</span> Queue<span style="color:#f92672">&lt;</span>TypedTimeValue<span style="color:#f92672">&gt;,</span> List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;&gt;</span> <span style="color:#f92672">{</span>
    <span style="color:#f92672">...</span>
</code></pre></div><p>Stiamo implementando l&rsquo;interfaccia <code>Collector</code>. I parametri di tipo che
stiamo fornendo esprimono tre cose:</p>
<ul>
<li>stiamo collezionando valori di tipo <code>TypedTimeValue</code></li>
<li>il nostro accumulatore interno usa una <code>Queue&lt;TypedTimeValue&gt;</code></li>
<li>alla fine del lavoro, ritorniamo una  <code>List&lt;TimeValue&gt;</code></li>
</ul>
<p>Una <code>Queue</code> Ã¨ solo una <code>List</code> thread safe. Ne forniamo
l&rsquo;implementazione usando il metodo <code>supplier</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Override</span>
<span style="color:#66d9ef">public</span> Supplier<span style="color:#f92672">&lt;</span>Queue<span style="color:#f92672">&lt;</span>TypedTimeValue<span style="color:#f92672">&gt;&gt;</span> <span style="color:#a6e22e">supplier</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">return</span> ConcurrentLinkedQueue<span style="color:#f92672">::</span><span style="color:#66d9ef">new</span><span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>In questo caso, l&rsquo;implementazione Ã¨ una <code>ConcurrentLinkedQueue</code> che, di
nuovo, Ã¨ solo una specie di <code>ArrayList</code> thread safe.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Override</span>
<span style="color:#66d9ef">public</span> BiConsumer<span style="color:#f92672">&lt;</span>Queue<span style="color:#f92672">&lt;</span>TypedTimeValue<span style="color:#f92672">&gt;,</span> TypedTimeValue<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">accumulator</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">return</span> Queue<span style="color:#f92672">::</span>add<span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>L&rsquo;accumulatore deve tornare una funzione che il collettore usa per
accumulare i dati in input. Come puoi vedere, torniamo semplicemente un
riferimento al metodo <code>add</code> di <code>Queue</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Override</span>
<span style="color:#66d9ef">public</span> BinaryOperator<span style="color:#f92672">&lt;</span>Queue<span style="color:#f92672">&lt;</span>TypedTimeValue<span style="color:#f92672">&gt;&gt;</span> <span style="color:#a6e22e">combiner</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">(</span>typedTimeValues<span style="color:#f92672">,</span> typedTimeValues2<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">{</span>
        typedTimeValues<span style="color:#f92672">.</span><span style="color:#a6e22e">addAll</span><span style="color:#f92672">(</span>typedTimeValues2<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">return</span> typedTimeValues<span style="color:#f92672">;</span>
    <span style="color:#f92672">};</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Il metodo <code>combiner</code> deve tornare una funzione che combina due
accumulatori.  L&rsquo;implementazione deve prendere tutti gli elementi del
secondo accumulatore ed aggiungerli al primo, che non suona molto
funzionale in termini di immutabilitÃ  ma in questo caso Ã¨ un
comportamento atteso, ed Ã¨ totalmente ok.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Override</span>
<span style="color:#66d9ef">public</span> Function<span style="color:#f92672">&lt;</span>Queue<span style="color:#f92672">&lt;</span>TypedTimeValue<span style="color:#f92672">&gt;,</span> List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;&gt;</span> <span style="color:#a6e22e">finisher</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#f92672">...</span>
</code></pre></div><p>Infine, il <code>finisher</code> deve tornare una funzione che prende tutti i
valori accumulati nella nostra <code>Queue&lt;TypedTimeValue&gt;</code> e torna una
<code>List&lt;TimeValue&gt;</code> con i nostri indici di qualitÃ  dell&rsquo;aria.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">final</span> Map<span style="color:#f92672">&lt;</span>Instant<span style="color:#f92672">,</span> TimeValue<span style="color:#f92672">&gt;</span> aqiAccumulator <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;&gt;();</span>
</code></pre></div><p>Questa Ã¨ una mappa che serve a collezionare gli indici di qualitÃ 
dell&rsquo;aria.  Come puoi vedere Ã¨ indicizzata per timestamp, cosÃ¬ che non
avremo entry duplicate quando calcoli piÃ¹ recenti per uno stesso
timestamp saranno messe nella mappa rimpiazzando quelle vecchie.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">return</span> accumulator <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">{</span>
   accumulator<span style="color:#f92672">.</span><span style="color:#a6e22e">stream</span><span style="color:#f92672">()</span>
           <span style="color:#f92672">.</span><span style="color:#a6e22e">map</span><span style="color:#f92672">(</span>TypedTimeValue<span style="color:#f92672">::</span>timestamp<span style="color:#f92672">)</span>
           <span style="color:#f92672">.</span><span style="color:#a6e22e">sorted</span><span style="color:#f92672">()</span>
           <span style="color:#f92672">.</span><span style="color:#a6e22e">forEach</span><span style="color:#f92672">(</span>entryTS <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">{</span>
               <span style="color:#66d9ef">final</span> TimeValue lastTemperature <span style="color:#f92672">=</span> getClosest<span style="color:#f92672">(</span>accumulator<span style="color:#f92672">,</span> TypedTimeValue<span style="color:#f92672">.</span><span style="color:#a6e22e">Type</span><span style="color:#f92672">.</span><span style="color:#a6e22e">T</span><span style="color:#f92672">,</span> entryTS<span style="color:#f92672">);</span>
               <span style="color:#66d9ef">final</span> TimeValue lastCarbonMonoxidePercentage <span style="color:#f92672">=</span> getClosest<span style="color:#f92672">(</span>accumulator<span style="color:#f92672">,</span> TypedTimeValue<span style="color:#f92672">.</span><span style="color:#a6e22e">Type</span><span style="color:#f92672">.</span><span style="color:#a6e22e">C</span><span style="color:#f92672">,</span> entryTS<span style="color:#f92672">);</span>

               <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>lastTemperature <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">&amp;&amp;</span> lastCarbonMonoxidePercentage <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                   Instant timestamp <span style="color:#f92672">=</span> mostRecent<span style="color:#f92672">(</span>lastTemperature<span style="color:#f92672">.</span><span style="color:#a6e22e">timestamp</span><span style="color:#f92672">(),</span> lastCarbonMonoxidePercentage<span style="color:#f92672">.</span><span style="color:#a6e22e">timestamp</span><span style="color:#f92672">());</span>
                   aqiAccumulator<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>timestamp<span style="color:#f92672">,</span> TimeValue<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span>timestamp<span style="color:#f92672">,</span> airQualityIndex<span style="color:#f92672">(</span>lastTemperature<span style="color:#f92672">.</span><span style="color:#a6e22e">value</span><span style="color:#f92672">(),</span> lastCarbonMonoxidePercentage<span style="color:#f92672">.</span><span style="color:#a6e22e">value</span><span style="color:#f92672">(),</span> maxTemperature<span style="color:#f92672">)));</span>
               <span style="color:#f92672">}</span>
           <span style="color:#f92672">});</span>

   <span style="color:#66d9ef">return</span> aqiAccumulator<span style="color:#f92672">.</span><span style="color:#a6e22e">values</span><span style="color:#f92672">().</span><span style="color:#a6e22e">stream</span><span style="color:#f92672">()</span>
           <span style="color:#f92672">.</span><span style="color:#a6e22e">sorted</span><span style="color:#f92672">()</span>
           <span style="color:#f92672">.</span><span style="color:#a6e22e">collect</span><span style="color:#f92672">(</span>Collectors<span style="color:#f92672">.</span><span style="color:#a6e22e">toUnmodifiableList</span><span style="color:#f92672">());</span>
<span style="color:#f92672">};</span>
</code></pre></div><p>Questo Ã¨ un bel mappazzone di codice ma guardiamolo un po' alla volta.
Stiamo trasmettendo i dati accumulati, estraendo il timestamp,
ordinando per questo e, per ogni timestamp, guardiamo ai dati di
temperatura e percentuale di monossido di carbonio con il timestamp piÃ¹
vicino. <em>PiÃ¹ vicino</em> vuol dire che il timestamp che stiamo valutando
deve essere precedente o uguale al timestamp in questione.</p>
<p>Se abbiamo entrambi i dati (<code>T</code> e <code>C</code>), possiamo procedere al calcolo
dell'<code>AQi</code> e mettere il suo valore nella mappa <code>aqiAccumulator</code>.</p>
<p>Infine, tutto quello che dobbiamo fare Ã¨ prendere i valori nella mappa
<code>aqiAccumulator</code>, ordinarli per timestamp e collezionarli in una
<code>List&lt;TimeValue&gt;</code> non modificabile.</p>
<p>L&rsquo;ordinamento Ã¨ reso possibile dal fatto che la nostra classe
<code>TimeValue</code> implementa <code>Comparable&lt;TimeValue&gt;</code>.</p>
<p>Ci sono diversi punti nel metodo <code>finisher</code> in cui guardo dentro le
strutture dati su cui sto iterando, il chÃ©, di nuovo, non sembra molto
kosher in termini di programmazione funzionale, ma Ã¨ ok perchÃ© so che i
dati che sto esaminando non sono suscettibili a modifiche dietro le
quinte da parte di thread concorrenti.</p>
<p>Questo calcolatore Ã¨ migliore di quello <em>vecchia scuola</em>? Non ne sono
sicuro.  Questa roba Ã¨ ancora abbastanza verbosa, ma mi sembra piÃ¹
facile da leggere dal momento che molto del codice Ã¨ scritto in uno
stile dichiarativo invece che imperativo.</p>
<h2 id="considerazioni-sulla-concorrenza">Considerazioni sulla concorrenza</h2>
<p>Siccome dobbiamo recuperare due diversi set di dati da due diversi
provider (uno per i dati di temperatura e un altro per i dati di
percentuale di monossido di carbonio), potremmo voler far girare i
client in parallelo. Questo ha un vantaggio rispetto all&rsquo;esecuzione a
singolo thread in cui dovresti serializzare le chiamate ai provider.</p>
<p>In un ambiente a singolo threaded, potresti scrivere:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">TimeValueProvider providerT <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> TemperatureTimeValueProvider<span style="color:#f92672">();</span>
TimeValueProvider providerC <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> CarbonMonoxidePercentageProvider<span style="color:#f92672">();</span>
List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;</span> timeValuesT <span style="color:#f92672">=</span> providerT<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">();</span>
List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;</span> timeValuesC <span style="color:#f92672">=</span> providerC<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">();</span>
</code></pre></div><p>Questo si traduce nel seguente modello di esecuzione seriale:</p>
<p><img src="/images/posts/sequence-diagram-serial.jpg" alt="sequence diagram per l&rsquo;esecuzione seriale"></p>
<p>Come abbiamo detto, possiamo fare meglio di cosÃ¬. In un ambiente
multithread, possiamo lanciare due client concorrenti e far partire il
processamento dei dati appena abbiamo ricevuto risposta da entrambi.
Questo ci risparmia un po' di tempo e potenzialmente velocizza i nostri
tempi di risposta.</p>
<p><img src="/images/posts/sequence-diagram-parallel.jpg" alt="sequence diagram per l&rsquo;esecuzione parallela"></p>
<p>Come implementiamo questo modello di esecuzione nel nostro codice? Ci
sono diverse opzioni, ma la piÃ¹ popolare, e quella che personalmente
preferisco, Ã¨ usare i <code>CompletableFuture</code>, che sono stati introdotti in
Java 8, se non ricordo male.</p>
<p>Un <code>CompletableFuture</code> Ã¨ un contenitoree per una computazione. Gli dai
il codice che vuoi eseguire e il runtime di Java si preoccupa di farlo
girare in concorrenza in uno scheduler multithread. Lo scheduler Ã¨
ovviamente configurabile ma i default vanno bene per il nostro caso.
Puoi vedere l&rsquo;esempio completo
<a href="https://github.com/mcaserta/time-series-concurrency-example/blob/master/src/main/java/com/mirkocaserta/example/App.java">qui</a>.</p>
<p>Nel mio esempio ho dichiarato il mio <code>CompletableFuture</code> cosÃ¬:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">CompletableFuture<span style="color:#f92672">&lt;</span>List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;&gt;</span> timedValuesFuture1 <span style="color:#f92672">=</span> CompletableFuture<span style="color:#f92672">.</span><span style="color:#a6e22e">supplyAsync</span><span style="color:#f92672">(()</span> <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">{</span>
   log<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Calling provider1...&#34;</span><span style="color:#f92672">);</span>
   List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;</span> timeValues <span style="color:#f92672">=</span> provider1<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">();</span>
   log<span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;provider 1 returned: %s\n&#34;</span><span style="color:#f92672">,</span> timeValues<span style="color:#f92672">));</span>
   <span style="color:#66d9ef">return</span> timeValues<span style="color:#f92672">;</span>
<span style="color:#f92672">});</span>
</code></pre></div><p>Questo Ã¨ un po' verboso poichÃ© volevo includere dei log per mostrare
come il codice gira in parallelo. Potrei benissimo aver scritto invece:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">CompletableFuture<span style="color:#f92672">&lt;</span>List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;&gt;</span> timedValuesFuture1 <span style="color:#f92672">=</span> CompletableFuture<span style="color:#f92672">.</span><span style="color:#a6e22e">supplyAsync</span><span style="color:#f92672">(</span>provider1<span style="color:#f92672">::</span>get<span style="color:#f92672">);</span>
</code></pre></div><p>Questo Ã¨ sempre verboso ma decisamente meglio di prima. PoichÃ© la
computazione nel nostro <code>CompletableFuture</code> ritorna una
<code>List&lt;TimeValue&gt;</code>, il metodo <code>supplyAsync</code> ritorna un
<code>CompletableFuture&lt;List&lt;TimeValue&gt;&gt;</code>, che Ã¨ il modo di Java di dire che
la variabile <code>timedValuesFuture1</code> Ã¨ un <code>CompletableFuture</code> che contiene
una <code>List&lt;TimeValue&gt;</code>. Ti prego di notare che il codice che stiamo
passando al metodo <code>supplyAsync</code> Ã¨ dentro una lambda. Questo significa
che il nostro codice non viene eseguito nel metodo <code>supplyAsync</code> ma il
runtime di Java Ã¨ libero di scegliere il momento migliore per
eseguirlo.  Lo scheduler di default generalmente farÃ  partire i
<code>CompletableFuture</code> appena definiti ma devi sapere che non Ã¨
necessariamente cosÃ¬ e che definire una lambda non vuol dire che questa
sia eseguita nel punto in cui Ã¨ dichiarata.</p>
<p>Ora abbiamo bisogno di un modo per essere sicuro che i nostri
<code>CompletableFuture</code> abbiano finito la loro esecuzione prima di poter
procedere. Questo lo si fa componendo i future e chiamando il metodo
<code>join</code> sul future risultante:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">CompletableFuture<span style="color:#f92672">.</span><span style="color:#a6e22e">allOf</span><span style="color:#f92672">(</span>timedValuesFuture1<span style="color:#f92672">,</span> timedValuesFuture2<span style="color:#f92672">).</span><span style="color:#a6e22e">join</span><span style="color:#f92672">();</span>
</code></pre></div><p>Il metodo <code>allOf</code> ritorna un nuovo <code>CompletableFuture</code> che inscatola i
future che gli stiamo passando.  Su questo nuovo future poi chiamiamo
<code>join</code> che blocca l&rsquo;esecuzione fin quando tutti i future interni hanno
finito il lavoro.</p>
<p>Dopo questa linea siamo sicuri che i nostri thread sono stati eseguiti,
quindi possiamo prendere i dati di cui abbiamo bisogno dai nostri
future originali usando il metodo <code>join</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;</span> timeValues1 <span style="color:#f92672">=</span> timedValuesFuture1<span style="color:#f92672">.</span><span style="color:#a6e22e">join</span><span style="color:#f92672">();</span>
List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;</span> timeValues2 <span style="color:#f92672">=</span> timedValuesFuture2<span style="color:#f92672">.</span><span style="color:#a6e22e">join</span><span style="color:#f92672">();</span>
</code></pre></div><h2 id="esempio-di-output">Esempio di output</h2>
<p>Quando lanci l&rsquo;applicazione, dovresti vedere un output simile a questo:</p>
<pre><code>2021-02-03T17:50:26.772545406 --- [main] Hello concurrent world!
2021-02-03T17:50:26.801737530 --- [ForkJoinPool.commonPool-worker-3] Calling provider1...
2021-02-03T17:50:26.802105151 --- [main] Calling allOf(...).join()
2021-02-03T17:50:26.802202415 --- [ForkJoinPool.commonPool-worker-5] Calling provider2...
2021-02-03T17:50:27.834127796 --- [ForkJoinPool.commonPool-worker-5] provider 2 returned: [TimeValue{timestamp=2021-01-18T08:00:22Z, value=76.629}, TimeValue{timestamp=2021-01-18T08:00:45Z, value=90.241}]
2021-02-03T17:50:27.834702562 --- [ForkJoinPool.commonPool-worker-3] provider 1 returned: [TimeValue{timestamp=2021-01-18T08:00:24Z, value=30.318}, TimeValue{timestamp=2021-01-18T08:00:35Z, value=13.521}, TimeValue{timestamp=2021-01-18T08:00:35Z, value=29.518}, TimeValue{timestamp=2021-01-18T08:00:36Z, value=0.818}, TimeValue{timestamp=2021-01-18T08:00:46Z, value=8.695}, TimeValue{timestamp=2021-01-18T08:00:50Z, value=31.233}, TimeValue{timestamp=2021-01-18T08:00:51Z, value=24.675}, TimeValue{timestamp=2021-01-18T08:00:53Z, value=38.477}]
2021-02-03T17:50:27.835040844 --- [main] After allOf(...).join()
2021-02-03T17:50:27.852793190 --- [main] timeValues = [TimeValue{timestamp=2021-01-18T08:00:24Z, value=76.212}, TimeValue{timestamp=2021-01-18T08:00:35Z, value=75.212}, TimeValue{timestamp=2021-01-18T08:00:36Z, value=39.337}, TimeValue{timestamp=2021-01-18T08:00:45Z, value=46.143}, TimeValue{timestamp=2021-01-18T08:00:46Z, value=55.989}, TimeValue{timestamp=2021-01-18T08:00:50Z, value=84.161}, TimeValue{timestamp=2021-01-18T08:00:51Z, value=75.964}, TimeValue{timestamp=2021-01-18T08:00:53Z, value=93.217}]
</code></pre><p>Puoi vedere che ci sono tre diversi thread al lavoro qui:</p>
<ol>
<li>main</li>
<li>ForkJoinPool.commonPool-worker-3</li>
<li>ForkJoinPool.commonPool-worker-5</li>
</ol>
<p>Ãˆ interessante notare qui che, in questo specifico run,
<code>allOf(...).join()</code> Ã¨ stato chiamato molto prima che fosse chiamato il
provider 2 e che entrambi i risultati fossero tornati dai provider.</p>
<p>Il tuo output sarÃ  certamente diverso poichÃ©:</p>
<ol>
<li>l&rsquo;ordine di esecuzione dei thread Ã¨ non deterministico</li>
<li>i valori dei provider sono generati casualmente</li>
</ol>
<h2 id="conclusione">Conclusione</h2>
<p>Ce l&rsquo;hai fatta! Ãˆ stata una bella camminata. Spero sia stata
divertente.  Ho speso un bel po' di tempo su questa cosa quando stavo
cercando di entrare piÃ¹ a fondo in alcuni aspetti che ho incontrato a
lavoro. Ti suggerisco di fare lo stesso quando ti capitano problemi che
hanno bisogno di approfondimenti. Spero tu abbia trovato tutto ciÃ²
utile.</p>
<h2 id="bonus">Bonus</h2>
<p><img src="/images/posts/reading-memes-on-github.webp" alt="reading memes on github"></p>
<p><a href="https://www.reddit.com/r/ProgrammerHumor/comments/l1h14v/the_industry_is_really_shifting/">Credits</a></p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>questa Ã¨ la mia vendetta per tutti i brutti voti a scuola. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><img src="/images/posts/it-is-acceptable.jpg" alt="it is acceptable meme"> <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p><img src="/images/posts/this-is-fine.webp" alt="this is fine meme"> <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>I time series data, anche conosciuti come time-stamped
data, sono una sequenza di dati indicizzati in ordine di tempo.  Time-stamped
sono dati collezionati in diversi momenti. Questi dati consistono tipicamente
in misure successive fatta dalla stessa fonte in un intervallo di tempo e
sono usati per tracciarne il cambiamento nel tempo. <a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p>Mi piace pensare a questo movimento come a una specie di danza, e la
trovo sexy. Penso che <a href="https://youtu.be/XFkzRNyygfk">I&rsquo;m a creep, I&rsquo;m a
weirdo</a>. <a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
        </item>
        
        <item>
            <title>ðŸ‡ºðŸ‡¸ Time Series Data and CompletableFuture example in Java</title>
            <link>https://mirkocaserta.com/posts/2021/02/time-series-data-and-completablefuture-example-in-java/</link>
            <pubDate>Thu, 04 Feb 2021 18:19:00 +0000</pubDate>
            
            <guid>https://mirkocaserta.com/posts/2021/02/time-series-data-and-completablefuture-example-in-java/</guid>
            <description>Time Series Data and CompletableFuture example in Java Full code for all the examples can be found here.
How to run the program mvn clean compile verify exec:java Preface Suppose we want to calculate an air quality index based on two values:
 air temperature percentage of carbon monoxide in the air  Given the following symbols:
   symbol meaning     AQi air quality index   T air temperature in Celsius degrees   Tm maximum air temperature in CÂ°   C percentage of carbon monoxide in the air    We may calculate the AQi with the following sorry excuse of a formula:</description>
            <content type="html"><![CDATA[<h1 id="time-series-data-and-completablefuture-example-in-java">Time Series Data and CompletableFuture example in Java</h1>
<p>Full code for all the examples can be found
<a href="https://github.com/mcaserta/time-series-concurrency-example">here</a>.</p>
<h2 id="how-to-run-the-program">How to run the program</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">mvn clean compile verify exec:java
</code></pre></div><h2 id="preface">Preface</h2>
<p>Suppose we want to calculate an <em>air quality index</em> based on two values:</p>
<ul>
<li>air temperature</li>
<li>percentage of carbon monoxide in the air</li>
</ul>
<p>Given the following symbols:</p>
<table>
<thead>
<tr>
<th>symbol</th>
<th>meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>AQi</code></td>
<td>air quality index</td>
</tr>
<tr>
<td><code>T</code></td>
<td>air temperature in Celsius degrees</td>
</tr>
<tr>
<td><code>Tm</code></td>
<td>maximum air temperature in CÂ°</td>
</tr>
<tr>
<td><code>C</code></td>
<td>percentage of carbon monoxide in the air</td>
</tr>
</tbody>
</table>
<p>We may calculate the <code>AQi</code> with the following sorry excuse of a formula:</p>
<!-- raw HTML omitted -->
<p><img src="/images/posts/air-quality-formula.png" alt="air quality formula"></p>
<p><strong>DISCLAIMER:</strong> please note that this formula is in no way scientific, and it&rsquo;s
intended for educational purposes only. I don&rsquo;t want environmentalists and real
scientists chasing me around with math formulas and accusations of quackery.
Also, I saw a chance for a pretty LaTeX equation and I took it, because
aesthetics&hellip; and it makes me look smart, which I certainly am
not<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>What the formula attempts to say is that as the temperature and the carbon
monoxide percentage rise, the air quality decreases. Yeah, this is totally
unscientific but bear with me for the sake of argumentation, please.</p>
<p>I assume a maximum temperature of 40CÂ°. So, for instance:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ bc -l
bc 1.06
Copyright 1991-1994, 1997, 1998, <span style="color:#ae81ff">2000</span> Free Software Foundation, Inc.
This is free software with ABSOLUTELY NO WARRANTY.
For details type <span style="color:#e6db74">&#39;warranty&#39;</span>.
t<span style="color:#f92672">=</span>60; c<span style="color:#f92672">=</span>100; tm<span style="color:#f92672">=</span>40; <span style="color:#f92672">(((</span>t * 100<span style="color:#f92672">)</span> / tm<span style="color:#f92672">)</span> + c<span style="color:#f92672">)</span> / <span style="color:#ae81ff">2</span>
125.00000000000000000000
t<span style="color:#f92672">=</span>60; c<span style="color:#f92672">=</span>50; tm<span style="color:#f92672">=</span>40; <span style="color:#f92672">(((</span>t * 100<span style="color:#f92672">)</span> / tm<span style="color:#f92672">)</span> + c<span style="color:#f92672">)</span> / <span style="color:#ae81ff">2</span>
100.00000000000000000000
t<span style="color:#f92672">=</span>40; c<span style="color:#f92672">=</span>50; tm<span style="color:#f92672">=</span>40; <span style="color:#f92672">(((</span>t * 100<span style="color:#f92672">)</span> / tm<span style="color:#f92672">)</span> + c<span style="color:#f92672">)</span> / <span style="color:#ae81ff">2</span>
75.00000000000000000000
t<span style="color:#f92672">=</span>40; c<span style="color:#f92672">=</span>10; tm<span style="color:#f92672">=</span>40; <span style="color:#f92672">(((</span>t * 100<span style="color:#f92672">)</span> / tm<span style="color:#f92672">)</span> + c<span style="color:#f92672">)</span> / <span style="color:#ae81ff">2</span>
55.00000000000000000000
t<span style="color:#f92672">=</span>20; c<span style="color:#f92672">=</span>10; tm<span style="color:#f92672">=</span>40; <span style="color:#f92672">(((</span>t * 100<span style="color:#f92672">)</span> / tm<span style="color:#f92672">)</span> + c<span style="color:#f92672">)</span> / <span style="color:#ae81ff">2</span>
30.00000000000000000000
t<span style="color:#f92672">=</span>10; c<span style="color:#f92672">=</span>5; tm<span style="color:#f92672">=</span>40; <span style="color:#f92672">(((</span>t * 100<span style="color:#f92672">)</span> / tm<span style="color:#f92672">)</span> + c<span style="color:#f92672">)</span> / <span style="color:#ae81ff">2</span>
15.00000000000000000000
t<span style="color:#f92672">=</span>10; c<span style="color:#f92672">=</span>0.5; tm<span style="color:#f92672">=</span>40; <span style="color:#f92672">(((</span>t * 100<span style="color:#f92672">)</span> / tm<span style="color:#f92672">)</span> + c<span style="color:#f92672">)</span> / <span style="color:#ae81ff">2</span>
12.75000000000000000000
</code></pre></div><p>From this we can derive the following totally unscientific table:</p>
<table>
<thead>
<tr>
<th>AQi</th>
<th>meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>125 to âˆž</td>
<td>horrible death</td>
</tr>
<tr>
<td>100 to 125</td>
<td>painful death</td>
</tr>
<tr>
<td>75 to 100</td>
<td>death</td>
</tr>
<tr>
<td>55 to 75</td>
<td>it is acceptable<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></td>
</tr>
<tr>
<td>30 to 55</td>
<td>this is fine<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></td>
</tr>
<tr>
<td>15 to 30</td>
<td>fine and dandy</td>
</tr>
<tr>
<td>12.75 to 15</td>
<td>pretty cool</td>
</tr>
<tr>
<td>-âˆž to 12.75</td>
<td>welcome to Yakutsk, probably</td>
</tr>
</tbody>
</table>
<h2 id="service-providers">Service providers</h2>
<p>Suppose we have internet services that expose temperature and carbon monoxide
level monitoring values.  These services might expose an api that gives us
time series data<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.</p>
<p>So, for instance, we might call a temperature monitoring service, and it would
respond with time series data like this:</p>
<table>
<thead>
<tr>
<th>timestamp</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>2021-01-20T08:00:00Z</code></td>
<td><code>10.1</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:02:00Z</code></td>
<td><code>10.3</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:05:00Z</code></td>
<td><code>10.7</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:00Z</code></td>
<td><code>10.9</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:19Z</code></td>
<td><code>11.0</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:42Z</code></td>
<td><code>11.1</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:09:00Z</code></td>
<td><code>11.3</code></td>
</tr>
</tbody>
</table>
<p>A carbon monoxide percentage monitoring service might instead respond with data
that looks like this:</p>
<table>
<thead>
<tr>
<th>timestamp</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>2021-01-20T08:01:00Z</code></td>
<td><code>2.0</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:02:00Z</code></td>
<td><code>2.3</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:00Z</code></td>
<td><code>2.8</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:07:00Z</code></td>
<td><code>2.9</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:08:00Z</code></td>
<td><code>3.3</code></td>
</tr>
</tbody>
</table>
<p>Please note that I have sorted the data by timestamp to make it a bit more
readable, but you shouldn&rsquo;t make assumptions on the sort order of the data
returned by an external provider. Not that this is of any importance here as&hellip;</p>
<h1 id="the-algorithm">The algorithm</h1>
<p>&hellip;our algorithm now requires:</p>
<ol>
<li>concatenating the temperature and carbon monoxide percentage data</li>
<li>sorting by timestamp</li>
</ol>
<table>
<thead>
<tr>
<th>id</th>
<th>timestamp</th>
<th>value</th>
<th>type</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>2021-01-20T08:00:00Z</code></td>
<td><code>10.1</code></td>
<td><code>T</code></td>
</tr>
<tr>
<td><code>2</code></td>
<td><code>2021-01-20T08:01:00Z</code></td>
<td><code> 2.0</code></td>
<td><code>C</code></td>
</tr>
<tr>
<td><code>3</code></td>
<td><code>2021-01-20T08:02:00Z</code></td>
<td><code>10.3</code></td>
<td><code>T</code></td>
</tr>
<tr>
<td><code>4</code></td>
<td><code>2021-01-20T08:02:00Z</code></td>
<td><code> 2.3</code></td>
<td><code>C</code></td>
</tr>
<tr>
<td><code>5</code></td>
<td><code>2021-01-20T08:05:00Z</code></td>
<td><code>10.7</code></td>
<td><code>T</code></td>
</tr>
<tr>
<td><code>6</code></td>
<td><code>2021-01-20T08:06:00Z</code></td>
<td><code>10.9</code></td>
<td><code>T</code></td>
</tr>
<tr>
<td><code>7</code></td>
<td><code>2021-01-20T08:06:00Z</code></td>
<td><code> 2.8</code></td>
<td><code>C</code></td>
</tr>
<tr>
<td><code>8</code></td>
<td><code>2021-01-20T08:06:19Z</code></td>
<td><code>11.0</code></td>
<td><code>T</code></td>
</tr>
<tr>
<td><code>9</code></td>
<td><code>2021-01-20T08:06:42Z</code></td>
<td><code>11.1</code></td>
<td><code>T</code></td>
</tr>
<tr>
<td><code>10</code></td>
<td><code>2021-01-20T08:07:00Z</code></td>
<td><code> 2.9</code></td>
<td><code>C</code></td>
</tr>
<tr>
<td><code>11</code></td>
<td><code>2021-01-20T08:08:00Z</code></td>
<td><code> 3.3</code></td>
<td><code>C</code></td>
</tr>
<tr>
<td><code>12</code></td>
<td><code>2021-01-20T08:09:00Z</code></td>
<td><code>11.3</code></td>
<td><code>T</code></td>
</tr>
</tbody>
</table>
<blockquote>
<p>type: T is temperature and C is carbon monoxide percentage</p>
</blockquote>
<p>Our task now is to scan the data, starting from the beginning, one row at a time,
computing the air quality index as we go forward, step by step.</p>
<p>The first thing to note here is that to compute our <code>AQi</code> formula we need to have
both values for <code>T</code> and <code>C</code>. In other words, the first time point where we can
apply our formula is that with id <code>2</code> as we have a value for <code>T</code> in id <code>1</code> and
a value for <code>C</code> in id <code>2</code>. So we take our values (<code>10.1</code> for <code>T</code> and <code>2.0</code> for
<code>C</code>), apply the formula, and we have a first <code>AQi</code> value of <code>13.625</code> which we
associate with the timestamp in id <code>2</code>, as that is the moment our computation
refers to. Our first <code>AQi</code> entry in the resulting time series should now look
like this:</p>
<table>
<thead>
<tr>
<th>timestamp</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>2021-01-20T08:01:00Z</code></td>
<td><code>13.625</code></td>
</tr>
</tbody>
</table>
<p>From now on, our calculation can be applied to every remaining element in the
time series, keeping in mind that we must correlate each value with the most
recent value of the other type. In other words:</p>
<table>
<thead>
<tr>
<th>for id</th>
<th>pick values from id</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>2</code></td>
<td><code>1, 2</code></td>
</tr>
<tr>
<td><code>3</code></td>
<td><code>2, 3</code></td>
</tr>
<tr>
<td><code>4</code></td>
<td><code>3, 4</code></td>
</tr>
<tr>
<td><code>5</code></td>
<td><code>4, 5</code></td>
</tr>
<tr>
<td><code>6</code></td>
<td><code>4, 6</code></td>
</tr>
<tr>
<td><code>7</code></td>
<td><code>6, 7</code></td>
</tr>
<tr>
<td><code>8</code></td>
<td><code>7, 8</code></td>
</tr>
<tr>
<td><code>9</code></td>
<td><code>7, 9</code></td>
</tr>
<tr>
<td><code>10</code></td>
<td><code>9, 10</code></td>
</tr>
<tr>
<td><code>11</code></td>
<td><code>9, 11</code></td>
</tr>
<tr>
<td><code>12</code></td>
<td><code>11, 12</code></td>
</tr>
</tbody>
</table>
<p>You can think of this kind of motion as a
<a href="https://towardsdatascience.com/time-series-analysis-resampling-shifting-and-rolling-f5664ddef77e">rolling time window</a>
as you have a window that moves forward in time focusing on the most
recent data for our specific <code>T</code> and <code>C</code> measures at each
step<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>.</p>
<h2 id="rolling-time-window">Rolling Time Window</h2>
<p>Go ahead, scroll down. You&rsquo;re going to see it.</p>
<pre><code>/===================================================================================\
|                   Step 01 :: T = 10.1, C = 2.0 :: AQi = 13.625                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
     |&lt;----------&gt;|                                                                


/===================================================================================\
|                   Step 02 :: T = 10.3, C = 2.0 :: AQi = 13.875                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
            |&lt;----------&gt;|

/===================================================================================\
|                   Step 03 :: T = 10.3, C = 2.3 :: AQi = 14.025                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
                  |&lt;----------&gt;|

/===================================================================================\
|                   Step 04 :: T = 10.7, C = 2.3 :: AQi = 14.525                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
                         |&lt;----------&gt;|

/===================================================================================\
|                   Step 05 :: T = 10.9, C = 2.3 :: AQi = 14.775                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
                         |&lt;-----------------&gt;|

/===================================================================================\
|                   Step 06 :: T = 10.9, C = 2.8 :: AQi = 15.025                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
                                      |&lt;----------&gt;|

/===================================================================================\
|                   Step 07 :: T = 11.0, C = 2.8 :: AQi = 15.150                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
                                             |&lt;----------&gt;|

/===================================================================================\
|                   Step 08 :: T = 11.1, C = 2.8 :: AQi = 15.275                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
                                             |&lt;-----------------&gt;|

/===================================================================================\
|                   Step 09 :: T = 11.1, C = 2.9 :: AQi = 15.325                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
                                                          |&lt;----------&gt;|

/===================================================================================\
|                   Step 10 :: T = 11.1, C = 3.3 :: AQi = 15.525                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
                                                          |&lt;----------------&gt;|

/===================================================================================\
|                   Step 11 :: T = 11.3, C = 3.3 :: AQi = 15.775                    |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
| id |   1  |  2  |   3  |  4  |   5  |   6  |  7  |   8  |   9  |  10 |  11 |  12  |
|----+------+-----+------+-----+------+------+-----+------+------+-----+-----+------|
|  T | 10.1 |     | 10.3 |     | 10.7 | 10.9 |     | 11.0 | 11.1 |     |     | 11.3 |
|  C |      | 2.0 |      | 2.3 |      |      | 2.8 |      |      | 2.9 | 3.3 |      |
                                                                       |&lt;----------&gt;|
</code></pre><p>Given the above, our complete resulting time series for the <code>AQi</code> is:</p>
<table>
<thead>
<tr>
<th>timestamp</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>2021-01-20T08:01:00Z</code></td>
<td><code>13.625</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:02:00Z</code></td>
<td><code>13.875</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:02:00Z</code></td>
<td><code>14.025</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:05:00Z</code></td>
<td><code>14.525</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:00Z</code></td>
<td><code>14.775</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:00Z</code></td>
<td><code>15.025</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:19Z</code></td>
<td><code>15.150</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:42Z</code></td>
<td><code>15.275</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:07:00Z</code></td>
<td><code>15.325</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:08:00Z</code></td>
<td><code>15.525</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:09:00Z</code></td>
<td><code>15.775</code></td>
</tr>
</tbody>
</table>
<p>If you&rsquo;ve looked closely, you might have noticed that we have a couple
duplicate timestamps in our results, specifically <code>2021-01-20T08:02:00Z</code> and
<code>2021-01-20T08:06:00Z</code>. These represent a time paradox as it appears that our
<code>AQi</code> has two different values at the same time.</p>
<p><img src="/images/posts/i-find-your-lack-of-logic-disturbing.jpg" alt="I find your lack of logic disturbing"></p>
<p>We both know this data is eventually going to show up on a web page.  Also, we
wouldn&rsquo;t want one of those hipster javascript frontend developers to point out
a lack of logic or, worse, an inconsistency in our data to us, wouldn&rsquo;t we?</p>
<p>Yeah, I thought so. So, my idea is that we can safely discard the first entry
of a duplicate timestamp as it refers to a calculation with stale data. Why?
Well, consider the values for the first duplicate timestamp:
<code>2021-01-20T08:02:00Z</code>. The first time we computed the <code>AQi</code>, we picked data
from id <code>2</code> and <code>3</code> and id <code>2</code> refers to a previous timestamp, specifically
<code>2021-01-20T08:01:00Z</code>. The second time we computed the <code>AQi</code>, we were using
data from id <code>3</code> and <code>4</code>, which both refer to timestamp <code>2021-01-20T08:02:00Z</code>,
so this computation&rsquo;s result is more relevant than the previous one which we
stamped with the same <code>2021-01-20T08:02:00Z</code> timestamp.</p>
<p>The same thing applies to the <code>AQi</code> entry with timestamp <code>2021-01-20T08:06:00Z</code>
as the first computation was using ids <code>4</code> and <code>6</code> while the second was
considering ids <code>6</code> and <code>7</code> which are fresher than the timestamp in id <code>4</code>.</p>
<p>So we erase a couple entries, and our clean result set now looks like this:</p>
<table>
<thead>
<tr>
<th>timestamp</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>2021-01-20T08:01:00Z</code></td>
<td><code>13.625</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:02:00Z</code></td>
<td><code>14.025</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:05:00Z</code></td>
<td><code>14.525</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:00Z</code></td>
<td><code>15.025</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:19Z</code></td>
<td><code>15.150</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:42Z</code></td>
<td><code>15.275</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:07:00Z</code></td>
<td><code>15.325</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:08:00Z</code></td>
<td><code>15.525</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:09:00Z</code></td>
<td><code>15.775</code></td>
</tr>
</tbody>
</table>
<p>Just as an equation is an excuse to brush up on some
<a href="https://www.latex-project.org/">LaTeX</a>, a good time
series is an excellent candidate for <a href="http://www.gnuplot.info/">gnuplot</a>.</p>
<p><img src="/images/posts/plot-output.png" alt="plot of the data so far"></p>
<p>Real data is of course much more chaotic than this, and you might want to
normalize the result by an arbitrary time interval, say one minute:</p>
<table>
<thead>
<tr>
<th>timestamp</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>2021-01-20T08:01:00Z</code></td>
<td><code>13.625</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:02:00Z</code></td>
<td><code>14.025</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:03:00Z</code></td>
<td><code>14.025</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:04:00Z</code></td>
<td><code>14.025</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:05:00Z</code></td>
<td><code>14.525</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:06:00Z</code></td>
<td><code>15.025</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:07:00Z</code></td>
<td><code>15.325</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:08:00Z</code></td>
<td><code>15.525</code></td>
</tr>
<tr>
<td><code>2021-01-20T08:09:00Z</code></td>
<td><code>15.775</code></td>
</tr>
</tbody>
</table>
<p><img src="/images/posts/plot-output-normalized.png" alt="plot of the normalized data"></p>
<p>Makes sense? I certainly hope so.</p>
<p><img src="/images/posts/yes.gif" alt="yes"></p>
<h2 id="lets-get-coding">Let&rsquo;s get coding</h2>
<p>Time to write some code. First of all, let&rsquo;s define an interface for our <code>AQi</code>
calculator, so we can provide different implementations later on.</p>
<p>The code for this interface can be seen
<a href="https://github.com/mcaserta/time-series-concurrency-example/blob/master/src/main/java/com/mirkocaserta/example/AirQualityIndexCalculator.java">here</a>.</p>
<p>This interface makes for a convenient place to implement the <code>AQi</code> formula:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">double</span> <span style="color:#a6e22e">airQualityIndex</span><span style="color:#f92672">(</span><span style="color:#66d9ef">double</span> temperature<span style="color:#f92672">,</span> <span style="color:#66d9ef">double</span> carbonMonoxidePercentage<span style="color:#f92672">,</span> <span style="color:#66d9ef">double</span> maxTemperature<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">(((</span>temperature <span style="color:#f92672">*</span> 100<span style="color:#f92672">)</span> <span style="color:#f92672">/</span> maxTemperature<span style="color:#f92672">)</span> <span style="color:#f92672">+</span> carbonMonoxidePercentage<span style="color:#f92672">)</span> <span style="color:#f92672">/</span> 2<span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>This method takes a temperature, a carbon monoxide percentage, a max
temperature and returns the <code>AQi</code>. Nice.</p>
<p>The interesting bit however is this method:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">calculate</span><span style="color:#f92672">(</span>List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;</span> temperatures<span style="color:#f92672">,</span> List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;</span> carbonMonoxidePercentages<span style="color:#f92672">);</span>
</code></pre></div><p>This says that the <code>calculate</code> method takes two lists of <code>TimeValue</code>s: the
first is a list of temperatures and the other is a list of carbon monoxide
percentages. It then returns a list of <code>TimeValue</code>s, only this time the list is
representing air quality indices.</p>
<p>What is a <code>TimeValue</code>? You can see its definition
<a href="https://github.com/mcaserta/time-series-concurrency-example/blob/c5b4574a40be0a818aba1513aaef7cc9d2a41d2b/src/main/java/com/mirkocaserta/example/TimeValue.java#L7">here</a>.
Although this seems horribly complicated due to the verbosity of the Java
language and a few implementation details, you can think of a time value as
just a convenient way to represent an <code>Instant</code> in time and its associated
<code>value</code>. Nothing fancy, really.</p>
<h2 id="coding-like-its-1984">Coding like it&rsquo;s 1984</h2>
<p>Now that we have a basic framework for our calculations, let&rsquo;s write a first
implementation using the old school style. The complete code for this is
<a href="https://github.com/mcaserta/time-series-concurrency-example/blob/master/src/main/java/com/mirkocaserta/example/OldSchoolAirQualityIndexCalculator.java">here</a>.
Let&rsquo;s take a look.</p>
<p>Our calculator takes the max temperature in its constructor and stores its
value in the <code>maxTemperature</code> instance constant as we&rsquo;ll need its value later
when invoking the <code>AQi</code> function.</p>
<p>Our <code>calculate</code> method should start with these two steps:</p>
<ol>
<li>concatenate the temperature and carbon monoxide percentage
data in a single data structure</li>
<li>sort the resulting data by timestamp</li>
</ol>
<p>Step 1 is implemented by this code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#75715e">// key = time value type (C = carbonMonoxidePercentage, T = temperature)
</span><span style="color:#75715e">// concatenated with the timestamp as a string
</span><span style="color:#75715e"></span>Map<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> TimeValue<span style="color:#f92672">&gt;</span> timeValuesByType <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;&gt;();</span>

<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>TimeValue temperature <span style="color:#f92672">:</span> temperatures<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    timeValuesByType<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;T&#34;</span><span style="color:#f92672">.</span><span style="color:#a6e22e">concat</span><span style="color:#f92672">(</span>temperature<span style="color:#f92672">.</span><span style="color:#a6e22e">ts</span><span style="color:#f92672">()),</span> temperature<span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>TimeValue carbonMonoxidePercentage <span style="color:#f92672">:</span> carbonMonoxidePercentages<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    timeValuesByType<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;C&#34;</span><span style="color:#f92672">.</span><span style="color:#a6e22e">concat</span><span style="color:#f92672">(</span>carbonMonoxidePercentage<span style="color:#f92672">.</span><span style="color:#a6e22e">ts</span><span style="color:#f92672">()),</span> carbonMonoxidePercentage<span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>The key in our <code>timeValuesByType</code> variable is a string concatenation of the
letter <code>T</code> for temperature or <code>C</code> for carbon monoxide percentage, followed by
the timestamp. We need to do this in order to later distinguish between the two
types of values. The key string will look like this:
<code>T2021-02-03T08:00:00.000Z</code>.</p>
<p>The sorting is done by this bit:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Map<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> TimeValue<span style="color:#f92672">&gt;</span> timeValuesByTypeSortedByTimestamp <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LinkedHashMap<span style="color:#f92672">&lt;&gt;();</span>
List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> keysSortedByTimestamp <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;(</span>timeValuesByType<span style="color:#f92672">.</span><span style="color:#a6e22e">keySet</span><span style="color:#f92672">());</span>
keysSortedByTimestamp<span style="color:#f92672">.</span><span style="color:#a6e22e">sort</span><span style="color:#f92672">(</span>comparing<span style="color:#f92672">(</span>s <span style="color:#f92672">-&gt;</span> timeValuesByType<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>s<span style="color:#f92672">).</span><span style="color:#a6e22e">timestamp</span><span style="color:#f92672">()));</span>

<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>String key <span style="color:#f92672">:</span> keysSortedByTimestamp<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    timeValuesByTypeSortedByTimestamp<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>key<span style="color:#f92672">,</span> timeValuesByType<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>key<span style="color:#f92672">));</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>This is just overcomplicated Java lingo for having our map sorted by the
timestamp we have in the Java map values. We declare a
<code>timeValuesByTypeSortedByTimestamp</code> map, implemented by a <code>LinkedHashMap</code>
because we want to preserve the iteration order of the map entries. Then we
wrap all the keys in our original <code>timeValuesByType</code> map in an ArrayList as we
need a <code>List</code> in order to then invoke <code>sort</code> on it. The comparator function we
are passing to sort is picking the timestamp of the relative entry in the
original <code>timeValuesByType</code> map. We then iterate <code>keysSortedByTimestamp</code>,
adding entries to our <code>timeValuesByTypeSortedByTimestamp</code> map.</p>
<p>Now we are declaring a map for the results of our <code>AQi</code> calculations and a
couple variables we&rsquo;ll need later:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Map<span style="color:#f92672">&lt;</span>Instant<span style="color:#f92672">,</span> Double<span style="color:#f92672">&gt;</span> airQualityIndexMap <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;&gt;();</span>
TimeValue lastTemperature <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
TimeValue lastCarbonMonoxidePercentage <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</code></pre></div><p>Here begins the fun part. We cycle through the map entries in our previously
defined <code>timeValuesByTypeSortedByTimestamp</code> variable.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>Map<span style="color:#f92672">.</span><span style="color:#a6e22e">Entry</span><span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> TimeValue<span style="color:#f92672">&gt;</span> entry <span style="color:#f92672">:</span> timeValuesByTypeSortedByTimestamp<span style="color:#f92672">.</span><span style="color:#a6e22e">entrySet</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
    <span style="color:#f92672">...</span>
</code></pre></div><p>We know that if the key begins with a <code>T</code>, we have a temperature value and, in
such case we store it in the <code>lastTemperature</code> variable.  Otherwise, the value
must be of type <code>C</code> for carbon, so we do the same for the
<code>lastCarbonMonoxidePercentage</code> variable.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>entry<span style="color:#f92672">.</span><span style="color:#a6e22e">getKey</span><span style="color:#f92672">().</span><span style="color:#a6e22e">startsWith</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;T&#34;</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
    lastTemperature <span style="color:#f92672">=</span> entry<span style="color:#f92672">.</span><span style="color:#a6e22e">getValue</span><span style="color:#f92672">();</span>
<span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>entry<span style="color:#f92672">.</span><span style="color:#a6e22e">getKey</span><span style="color:#f92672">().</span><span style="color:#a6e22e">startsWith</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;C&#34;</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
    lastCarbonMonoxidePercentage <span style="color:#f92672">=</span> entry<span style="color:#f92672">.</span><span style="color:#a6e22e">getValue</span><span style="color:#f92672">();</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>At this point, if we have a value both for <code>T</code> and <code>C</code>, we can proceed to
calculate our <code>AQi</code> and store its value in the <code>airQualityIndexMap</code> variable.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>lastTemperature <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">&amp;&amp;</span> lastCarbonMonoxidePercentage <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    airQualityIndexMap<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>
        mostRecent<span style="color:#f92672">(</span>lastTemperature<span style="color:#f92672">.</span><span style="color:#a6e22e">timestamp</span><span style="color:#f92672">(),</span> lastCarbonMonoxidePercentage<span style="color:#f92672">.</span><span style="color:#a6e22e">timestamp</span><span style="color:#f92672">()),</span>
        airQualityIndex<span style="color:#f92672">(</span>lastTemperature<span style="color:#f92672">.</span><span style="color:#a6e22e">value</span><span style="color:#f92672">(),</span> lastCarbonMonoxidePercentage<span style="color:#f92672">.</span><span style="color:#a6e22e">value</span><span style="color:#f92672">(),</span> maxTemperature<span style="color:#f92672">)</span>
    <span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>We are picking the most recent timestamp between the two <code>TimeValue</code>s using a
handy helper function that we defined earlier in our calculator interface.</p>
<p>An intended side effect of using a map for this data structure is that, when we
<code>put</code> a new value for an existing timestamp, the entry gets overwritten by the
most recent one. This solves our problem with duplicate timestamps.</p>
<p>At the end of the cycle, our results are almost ready. We just need to sort by
timestamp again and return the values as a <code>List</code> of <code>TimeValue</code>s.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">List<span style="color:#f92672">&lt;</span>Instant<span style="color:#f92672">&gt;</span> keys <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;(</span>airQualityIndexMap<span style="color:#f92672">.</span><span style="color:#a6e22e">keySet</span><span style="color:#f92672">());</span>
keys<span style="color:#f92672">.</span><span style="color:#a6e22e">sort</span><span style="color:#f92672">(</span>Instant<span style="color:#f92672">::</span>compareTo<span style="color:#f92672">);</span>
List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;</span> results <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>

<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>Instant key <span style="color:#f92672">:</span> keys<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    results<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>TimeValue<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span>key<span style="color:#f92672">,</span> airQualityIndexMap<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>key<span style="color:#f92672">)));</span>
<span style="color:#f92672">}</span>
</code></pre></div><h2 id="functional-elegance">Functional elegance</h2>
<p>Can we do better than this? Absolutely. Let&rsquo;s use an elegant weapon for a more
civilized age: functional programming. Our
<a href="https://github.com/mcaserta/time-series-concurrency-example/blob/master/src/main/java/com/mirkocaserta/example/FunctionalAirQualityIndexCalculator.java">FunctionalAirQualityIndexCalculator</a>
is quite slimmed down, but that&rsquo;s just because the main logic behind the
calculations is now in the
<a href="https://github.com/mcaserta/time-series-concurrency-example/blob/master/src/main/java/com/mirkocaserta/example/AirQualityIndexCollector.java">AirQualityIndexCollector</a>.</p>
<p>Our new calculator is much simpler now. The first part is quite involved so
let&rsquo;s take a look at it first:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">List<span style="color:#f92672">&lt;</span>TypedTimeValue<span style="color:#f92672">&gt;</span> timeSeries <span style="color:#f92672">=</span> Stream<span style="color:#f92672">.</span><span style="color:#a6e22e">concat</span><span style="color:#f92672">(</span>
   temperatures<span style="color:#f92672">.</span><span style="color:#a6e22e">stream</span><span style="color:#f92672">().</span><span style="color:#a6e22e">map</span><span style="color:#f92672">(</span>e <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">new</span> TypedTimeValue<span style="color:#f92672">(</span>TypedTimeValue<span style="color:#f92672">.</span><span style="color:#a6e22e">Type</span><span style="color:#f92672">.</span><span style="color:#a6e22e">T</span><span style="color:#f92672">,</span> e<span style="color:#f92672">)),</span>
   carbonMonoxidePercentages<span style="color:#f92672">.</span><span style="color:#a6e22e">stream</span><span style="color:#f92672">().</span><span style="color:#a6e22e">map</span><span style="color:#f92672">(</span>e <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">new</span> TypedTimeValue<span style="color:#f92672">(</span>TypedTimeValue<span style="color:#f92672">.</span><span style="color:#a6e22e">Type</span><span style="color:#f92672">.</span><span style="color:#a6e22e">C</span><span style="color:#f92672">,</span> e<span style="color:#f92672">))</span>
<span style="color:#f92672">).</span><span style="color:#a6e22e">collect</span><span style="color:#f92672">(</span>Collectors<span style="color:#f92672">.</span><span style="color:#a6e22e">toUnmodifiableList</span><span style="color:#f92672">());</span>
</code></pre></div><p>There are several functional patterns at work here:</p>
<ul>
<li>
<p>the temperatures and carbon monoxide percentage data are streamed and mapped
into a type wrapper in order to later understand if the data we&rsquo;re looking at
is of type <code>T</code> or <code>C</code></p>
</li>
<li>
<p>the two resulting streams are concatenated using <code>Stream.concat</code></p>
</li>
<li>
<p>in the end we collect the concatenated stream into an unmodifiable
<code>List&lt;TypedTimeValue&gt;</code></p>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">return</span> timeSeries<span style="color:#f92672">.</span><span style="color:#a6e22e">stream</span><span style="color:#f92672">().</span><span style="color:#a6e22e">parallel</span><span style="color:#f92672">()</span>
    <span style="color:#f92672">.</span><span style="color:#a6e22e">collect</span><span style="color:#f92672">(</span>AirQualityIndexCollector<span style="color:#f92672">.</span><span style="color:#a6e22e">toUnmodifiableList</span><span style="color:#f92672">(</span>maxTemperature<span style="color:#f92672">));</span>
</code></pre></div><p>The <code>timeSeries</code> is then streamed in parallel into a collector that does the
real work and returns an unmodifiable <code>List&lt;TimeValue&gt;</code> with the air quality
indices.</p>
<p>Let&rsquo;s take a look at the collector.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AirQualityIndexCollector</span>
        <span style="color:#66d9ef">implements</span> Collector<span style="color:#f92672">&lt;</span>TypedTimeValue<span style="color:#f92672">,</span> Queue<span style="color:#f92672">&lt;</span>TypedTimeValue<span style="color:#f92672">&gt;,</span> List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;&gt;</span> <span style="color:#f92672">{</span>
    <span style="color:#f92672">...</span>
</code></pre></div><p>We&rsquo;re implementing the <code>Collector</code> interface. The type parameters we are
providing here express three things:</p>
<ul>
<li>we are collecting values of type <code>TypedTimeValue</code></li>
<li>our internal accumulator is using a <code>Queue&lt;TypedTimeValue&gt;</code></li>
<li>at the end of our work, we are returning a <code>List&lt;TimeValue&gt;</code></li>
</ul>
<p>A <code>Queue</code> is just a thread safe <code>List</code>. We provide the implementation using the
supplier method:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Override</span>
<span style="color:#66d9ef">public</span> Supplier<span style="color:#f92672">&lt;</span>Queue<span style="color:#f92672">&lt;</span>TypedTimeValue<span style="color:#f92672">&gt;&gt;</span> <span style="color:#a6e22e">supplier</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">return</span> ConcurrentLinkedQueue<span style="color:#f92672">::</span><span style="color:#66d9ef">new</span><span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>In this case, the implementation is a <code>ConcurrentLinkedQueue</code> which, again, is
just sort of a thread safe <code>ArrayList</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Override</span>
<span style="color:#66d9ef">public</span> BiConsumer<span style="color:#f92672">&lt;</span>Queue<span style="color:#f92672">&lt;</span>TypedTimeValue<span style="color:#f92672">&gt;,</span> TypedTimeValue<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">accumulator</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">return</span> Queue<span style="color:#f92672">::</span>add<span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>The accumulator method must return a function which the collector uses to
accumulate the input data. As you can see, we simply return a reference to the
<code>add</code> method in <code>Queue</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Override</span>
<span style="color:#66d9ef">public</span> BinaryOperator<span style="color:#f92672">&lt;</span>Queue<span style="color:#f92672">&lt;</span>TypedTimeValue<span style="color:#f92672">&gt;&gt;</span> <span style="color:#a6e22e">combiner</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">(</span>typedTimeValues<span style="color:#f92672">,</span> typedTimeValues2<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">{</span>
        typedTimeValues<span style="color:#f92672">.</span><span style="color:#a6e22e">addAll</span><span style="color:#f92672">(</span>typedTimeValues2<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">return</span> typedTimeValues<span style="color:#f92672">;</span>
    <span style="color:#f92672">};</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>The combiner method must return a function that combines two accumulators. The
implementation should pick all elements from the second accumulator and add
them to the first one, which doesn&rsquo;t sound very functional in terms of
immutability but in this case mutation is an expected behavior, and it&rsquo;s
totally fine.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Override</span>
<span style="color:#66d9ef">public</span> Function<span style="color:#f92672">&lt;</span>Queue<span style="color:#f92672">&lt;</span>TypedTimeValue<span style="color:#f92672">&gt;,</span> List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;&gt;</span> <span style="color:#a6e22e">finisher</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#f92672">...</span>
</code></pre></div><p>Finally, the finisher must return a function which takes all the accumulated
values in our <code>Queue&lt;TypedTimeValue&gt;</code> and return a <code>List&lt;TimeValue&gt;</code> with our
air quality indices.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">final</span> Map<span style="color:#f92672">&lt;</span>Instant<span style="color:#f92672">,</span> TimeValue<span style="color:#f92672">&gt;</span> aqiAccumulator <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;&gt;();</span>
</code></pre></div><p>This is a map that is going to collect all the air quality indices.  As you can
see, it&rsquo;s indexed by a timestamp, so we won&rsquo;t get duplicate entries as more
recent calculations for the same timestamps are put into the map replacing the
stale ones.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">return</span> accumulator <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">{</span>
   accumulator<span style="color:#f92672">.</span><span style="color:#a6e22e">stream</span><span style="color:#f92672">()</span>
           <span style="color:#f92672">.</span><span style="color:#a6e22e">map</span><span style="color:#f92672">(</span>TypedTimeValue<span style="color:#f92672">::</span>timestamp<span style="color:#f92672">)</span>
           <span style="color:#f92672">.</span><span style="color:#a6e22e">sorted</span><span style="color:#f92672">()</span>
           <span style="color:#f92672">.</span><span style="color:#a6e22e">forEach</span><span style="color:#f92672">(</span>entryTS <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">{</span>
               <span style="color:#66d9ef">final</span> TimeValue lastTemperature <span style="color:#f92672">=</span> getClosest<span style="color:#f92672">(</span>accumulator<span style="color:#f92672">,</span> TypedTimeValue<span style="color:#f92672">.</span><span style="color:#a6e22e">Type</span><span style="color:#f92672">.</span><span style="color:#a6e22e">T</span><span style="color:#f92672">,</span> entryTS<span style="color:#f92672">);</span>
               <span style="color:#66d9ef">final</span> TimeValue lastCarbonMonoxidePercentage <span style="color:#f92672">=</span> getClosest<span style="color:#f92672">(</span>accumulator<span style="color:#f92672">,</span> TypedTimeValue<span style="color:#f92672">.</span><span style="color:#a6e22e">Type</span><span style="color:#f92672">.</span><span style="color:#a6e22e">C</span><span style="color:#f92672">,</span> entryTS<span style="color:#f92672">);</span>

               <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>lastTemperature <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">&amp;&amp;</span> lastCarbonMonoxidePercentage <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                   Instant timestamp <span style="color:#f92672">=</span> mostRecent<span style="color:#f92672">(</span>lastTemperature<span style="color:#f92672">.</span><span style="color:#a6e22e">timestamp</span><span style="color:#f92672">(),</span> lastCarbonMonoxidePercentage<span style="color:#f92672">.</span><span style="color:#a6e22e">timestamp</span><span style="color:#f92672">());</span>
                   aqiAccumulator<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>timestamp<span style="color:#f92672">,</span> TimeValue<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span>timestamp<span style="color:#f92672">,</span> airQualityIndex<span style="color:#f92672">(</span>lastTemperature<span style="color:#f92672">.</span><span style="color:#a6e22e">value</span><span style="color:#f92672">(),</span> lastCarbonMonoxidePercentage<span style="color:#f92672">.</span><span style="color:#a6e22e">value</span><span style="color:#f92672">(),</span> maxTemperature<span style="color:#f92672">)));</span>
               <span style="color:#f92672">}</span>
           <span style="color:#f92672">});</span>

   <span style="color:#66d9ef">return</span> aqiAccumulator<span style="color:#f92672">.</span><span style="color:#a6e22e">values</span><span style="color:#f92672">().</span><span style="color:#a6e22e">stream</span><span style="color:#f92672">()</span>
           <span style="color:#f92672">.</span><span style="color:#a6e22e">sorted</span><span style="color:#f92672">()</span>
           <span style="color:#f92672">.</span><span style="color:#a6e22e">collect</span><span style="color:#f92672">(</span>Collectors<span style="color:#f92672">.</span><span style="color:#a6e22e">toUnmodifiableList</span><span style="color:#f92672">());</span>
<span style="color:#f92672">};</span>
</code></pre></div><p>This is quite a mouthful but let&rsquo;s go through it bit by bit.  We are streaming
the accumulated data, extracting the timestamp, sorting by it and, for each
timestamp we look for the temperature and carbon monoxide percentage data with
the closest timestamp.  <em>Closest</em> means that the timestamp we&rsquo;re evaluating
must be before of or equal to the timestamp in question.</p>
<p>If we have both data (<code>T</code> and <code>C</code>), we can proceed to calculate the <code>AQi</code> and
put its value into the <code>aqiAccumulator</code> map.</p>
<p>In the end, all we have to do is to stream the values in the <code>aqiAccumulator</code>
map, sort by timestamp and collect them in an unmodifiable <code>List&lt;TimeValue&gt;</code>.</p>
<p>Sorting like this is possible since we made our <code>TimeValue</code> class implement
<code>Comparable&lt;TimeValue&gt;</code>.</p>
<p>There are several points in the <code>finisher</code> method where I look into the
datastructures I&rsquo;m iterating on, which, again, doesn&rsquo;t look very kosher in
terms of functional programming, but it&rsquo;s okay as I know that the data I&rsquo;m
examining isn&rsquo;t being changed by a concurrent thread under the hood.</p>
<p>Is this better than our old school calculator? I&rsquo;m not sure.  This is still
quite verbose, but to me it seems easier to read as most of the code is
expressed in a declarative style rather than an imperative one.</p>
<h2 id="concurrency-considerations">Concurrency considerations</h2>
<p>As we need to retrieve two different sets of data from two different providers
(one for temperature data and one for carbon monoxide percentage data), we
might want to run the clients in parallel. This has an advantage over
traditional single threaded execution where you would have to serialize the
calls to the providers.</p>
<p>In a single threaded environment, you might write code like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">TimeValueProvider providerT <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> TemperatureTimeValueProvider<span style="color:#f92672">();</span>
TimeValueProvider providerC <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> CarbonMonoxidePercentageProvider<span style="color:#f92672">();</span>
List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;</span> timeValuesT <span style="color:#f92672">=</span> providerT<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">();</span>
List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;</span> timeValuesC <span style="color:#f92672">=</span> providerC<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">();</span>
</code></pre></div><p>This translates to the following serial execution model:</p>
<p><img src="/images/posts/sequence-diagram-serial.jpg" alt="sequence diagram for serial execution"></p>
<p>As we said, we can do better than this. In a multithreaded environment, we can
spawn the two clients concurrently and start processing their data as soon as
we receive a response from both. This saves us some time and potentially speeds
up our overall response time.</p>
<p><img src="/images/posts/sequence-diagram-parallel.jpg" alt="sequence diagram for parallel execution"></p>
<p>How do we implement this execution model in our code? There are several options
but the most popular and the one I personally like the most is to use
<code>CompletableFuture</code>s, which were introduced in Java 8 if I recall correctly.</p>
<p>A <code>CompletableFuture</code> is a container for a computation. You provide it the code
you want to execute and the Java runtime takes care of running it concurrently
in a threaded scheduler. The scheduler is of course customizable but the
defaults are okay for our simple case here.  You can see the complete example
<a href="https://github.com/mcaserta/time-series-concurrency-example/blob/master/src/main/java/com/mirkocaserta/example/App.java">here</a>.</p>
<p>In my example I have declared my <code>CompletableFuture</code>s like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">CompletableFuture<span style="color:#f92672">&lt;</span>List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;&gt;</span> timedValuesFuture1 <span style="color:#f92672">=</span> CompletableFuture<span style="color:#f92672">.</span><span style="color:#a6e22e">supplyAsync</span><span style="color:#f92672">(()</span> <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">{</span>
   log<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Calling provider1...&#34;</span><span style="color:#f92672">);</span>
   List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;</span> timeValues <span style="color:#f92672">=</span> provider1<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">();</span>
   log<span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;provider 1 returned: %s\n&#34;</span><span style="color:#f92672">,</span> timeValues<span style="color:#f92672">));</span>
   <span style="color:#66d9ef">return</span> timeValues<span style="color:#f92672">;</span>
<span style="color:#f92672">});</span>
</code></pre></div><p>This is a bit verbose as I wanted to include some logging to show you how this
code runs in parallel. I might as well have written:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">CompletableFuture<span style="color:#f92672">&lt;</span>List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;&gt;</span> timedValuesFuture1 <span style="color:#f92672">=</span> CompletableFuture<span style="color:#f92672">.</span><span style="color:#a6e22e">supplyAsync</span><span style="color:#f92672">(</span>provider1<span style="color:#f92672">::</span>get<span style="color:#f92672">);</span>
</code></pre></div><p>This is still verbose but definitely better than before. As the computation in
our <code>CompletableFuture</code> returns a <code>List&lt;TimeValue&gt;</code>, the <code>supplyAsync</code> method
returns a <code>CompletableFuture&lt;List&lt;TimeValue&gt;&gt;</code>, which is Java&rsquo;s way of saying
that the <code>timedValuesFuture1</code> variable is a <code>CompletableFuture</code> holding a
<code>List&lt;TimeValue&gt;</code>. Please note that the code we are passing to the
<code>supplyAsync</code> method is inside a lambda. What this means is that our code
doesn&rsquo;t get executed in the <code>supplyAsync</code> method but the Java runtime is free
to choose when it&rsquo;s the best time to run it. The default scheduler will
generally start running your <code>CompletableFuture</code>s as soon as they are defined
but you need to understand that this is not necessarily so and that defining a
lambda doesn&rsquo;t mean it gets executed at the point of declaration.</p>
<p>We now need a way to make sure our <code>CompletableFuture</code>s have completed their
execution before going on. This is done by composing our futures and calling
the <code>join</code> method on the resulting future:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">CompletableFuture<span style="color:#f92672">.</span><span style="color:#a6e22e">allOf</span><span style="color:#f92672">(</span>timedValuesFuture1<span style="color:#f92672">,</span> timedValuesFuture2<span style="color:#f92672">).</span><span style="color:#a6e22e">join</span><span style="color:#f92672">();</span>
</code></pre></div><p>The <code>allOf</code> method returns a new <code>CompletableFuture</code> which wraps the futures
we&rsquo;re passing to it. On this new future we then call <code>join</code> which blocks until
all the wrapped futures have finished executing.</p>
<p>After this line, we are sure that our threads have run, so we can get the data
we need from our original futures with the <code>join</code> method:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;</span> timeValues1 <span style="color:#f92672">=</span> timedValuesFuture1<span style="color:#f92672">.</span><span style="color:#a6e22e">join</span><span style="color:#f92672">();</span>
List<span style="color:#f92672">&lt;</span>TimeValue<span style="color:#f92672">&gt;</span> timeValues2 <span style="color:#f92672">=</span> timedValuesFuture2<span style="color:#f92672">.</span><span style="color:#a6e22e">join</span><span style="color:#f92672">();</span>
</code></pre></div><h2 id="example-output">Example output</h2>
<p>When you run the application, you should see output similar to this:</p>
<pre><code>2021-02-03T17:50:26.772545406 --- [main] Hello concurrent world!
2021-02-03T17:50:26.801737530 --- [ForkJoinPool.commonPool-worker-3] Calling provider1...
2021-02-03T17:50:26.802105151 --- [main] Calling allOf(...).join()
2021-02-03T17:50:26.802202415 --- [ForkJoinPool.commonPool-worker-5] Calling provider2...
2021-02-03T17:50:27.834127796 --- [ForkJoinPool.commonPool-worker-5] provider 2 returned: [TimeValue{timestamp=2021-01-18T08:00:22Z, value=76.629}, TimeValue{timestamp=2021-01-18T08:00:45Z, value=90.241}]
2021-02-03T17:50:27.834702562 --- [ForkJoinPool.commonPool-worker-3] provider 1 returned: [TimeValue{timestamp=2021-01-18T08:00:24Z, value=30.318}, TimeValue{timestamp=2021-01-18T08:00:35Z, value=13.521}, TimeValue{timestamp=2021-01-18T08:00:35Z, value=29.518}, TimeValue{timestamp=2021-01-18T08:00:36Z, value=0.818}, TimeValue{timestamp=2021-01-18T08:00:46Z, value=8.695}, TimeValue{timestamp=2021-01-18T08:00:50Z, value=31.233}, TimeValue{timestamp=2021-01-18T08:00:51Z, value=24.675}, TimeValue{timestamp=2021-01-18T08:00:53Z, value=38.477}]
2021-02-03T17:50:27.835040844 --- [main] After allOf(...).join()
2021-02-03T17:50:27.852793190 --- [main] timeValues = [TimeValue{timestamp=2021-01-18T08:00:24Z, value=76.212}, TimeValue{timestamp=2021-01-18T08:00:35Z, value=75.212}, TimeValue{timestamp=2021-01-18T08:00:36Z, value=39.337}, TimeValue{timestamp=2021-01-18T08:00:45Z, value=46.143}, TimeValue{timestamp=2021-01-18T08:00:46Z, value=55.989}, TimeValue{timestamp=2021-01-18T08:00:50Z, value=84.161}, TimeValue{timestamp=2021-01-18T08:00:51Z, value=75.964}, TimeValue{timestamp=2021-01-18T08:00:53Z, value=93.217}]
</code></pre><p>You can see there are three different threads at work here:</p>
<ol>
<li>main</li>
<li>ForkJoinPool.commonPool-worker-3</li>
<li>ForkJoinPool.commonPool-worker-5</li>
</ol>
<p>It&rsquo;s interesting to note here that in this specific run <code>allOf(...).join()</code> was
called much before calling provider 2 and both results were returned from
providers.</p>
<p>Your output will definitely be different as:</p>
<ol>
<li>the threads' execution order is non-deterministic</li>
<li>the providers' values are generated randomly</li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p>You&rsquo;ve made it! This was quite the run. I hope it&rsquo;s been entertaining.  I spent
quite a bit of time on this as I was trying to dig deeper into some issues I&rsquo;ve
had at work. I suggest you do the same when you run into problems that need
some clarification on your side. I also hope you found this useful.</p>
<h2 id="bonus">Bonus</h2>
<p><img src="/images/posts/reading-memes-on-github.webp" alt="reading memes on github"></p>
<p><a href="https://www.reddit.com/r/ProgrammerHumor/comments/l1h14v/the_industry_is_really_shifting/">Credits</a></p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>this is my revenge for all the bad math grades at
school. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><img src="/images/posts/it-is-acceptable.jpg" alt="it is acceptable meme"> <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p><img src="/images/posts/this-is-fine.webp" alt="this is fine meme"> <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>Time series data, also referred to as
time-stamped data, is a sequence of data points indexed in time order.
Time-stamped is data collected at different points in time. These data points
typically consist of successive measurements made from the same source over a
time interval and are used to track change over time. <a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p>I like to think of this movement as a kind of dance,
and I find it sexy. I think <a href="https://youtu.be/XFkzRNyygfk">I&rsquo;m a creep, I&rsquo;m a weirdo</a>. <a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
        </item>
        
        <item>
            <title>ðŸ‡®ðŸ‡¹ Pensa alle tue orecchie come fossero occhi</title>
            <link>https://mirkocaserta.com/posts/2018/10/pensa-alle-tue-orecchie-come-fossero-occhi/</link>
            <pubDate>Sun, 28 Oct 2018 18:22:00 +0000</pubDate>
            
            <guid>https://mirkocaserta.com/posts/2018/10/pensa-alle-tue-orecchie-come-fossero-occhi/</guid>
            <description>Metafisica dei Suoni Se la musica Ã¨ lâ€™arte dei suoni, lâ€™ear training Ã¨ l&amp;rsquo;allenamento dell&amp;rsquo;orecchio musicale. Cosa si intende con orecchio musicale? L&amp;rsquo;udito ha un aspetto passivo piÃ¹ ovvio che consiste nella capacitÃ  di riconoscere i suoni, ma ha anche un aspetto attivo in cui il musicista improvvisa una frase ed Ã¨ istantaneamente in grado di produrla sul proprio strumento.
Ma di questo parleremo piÃ¹ avanti. Per ora torniamo al suono.</description>
            <content type="html"><![CDATA[<h2 id="metafisica-dei-suoni">Metafisica dei Suoni</h2>
<p>Se la musica Ã¨ lâ€™arte dei suoni, lâ€™ear training Ã¨ l&rsquo;allenamento dell&rsquo;orecchio
musicale. Cosa si intende con orecchio musicale? L&rsquo;udito ha un aspetto passivo
piÃ¹ ovvio che consiste nella capacitÃ  di riconoscere i suoni, ma ha anche un
aspetto attivo in cui il musicista improvvisa una frase ed Ã¨ istantaneamente in
grado di produrla sul proprio strumento.</p>
<p>Ma di questo parleremo piÃ¹ avanti. Per ora torniamo al suono. Le sue
caratteristiche sono:Â </p>
<ul>
<li>altezza</li>
<li>durata</li>
<li>volume</li>
<li>timbro</li>
</ul>
<p>Un corpo, una volta percosso, produce una vibrazione che, mettendo in moto
lâ€™aria circostante, arriva fino a noi. L&rsquo;orecchio esterno convoglia le
vibrazioni nel canale uditivo dove il timpano inoltra questi movimenti
all&rsquo;orecchio interno.Â Qui, la coclea, un complesso sistema meccanico/idraulico,
attraverso le cellule ciliate, traduce le vibrazioni in impulsi nervosi che
vengono infine interpretati dal cervello per generare la familiare sensazione
di udito.</p>
<p>Se entrassimo nei dettagli del processo uditivo ci imbatteremmo subito nella
complessitÃ  e nei limiti conoscitivi dellâ€™analisi scientifica. Lâ€™aspetto piÃ¹
affascinante e misterioso dellâ€™udito rimane tuttavia il luogo del suo
manifestarsi: la coscienza.</p>
<p>Per noi esseri umani la coscienza Ã¨ una cosa scontata. Ci svegliamo al mattino
e ci ritroviamo immersi in un&rsquo;esperienza soggettiva in prima persona, come
fossimo in un cinema 3D multimediale con audio surround. Ma dov&rsquo;Ã¨ lo schermo su
cui viene proiettata l&rsquo;immagine che abbiamo davanti ai nostri occhi? Dove si
trova la voce interiore che in questo momento sta leggendo queste parole? Be',
non lo sappiamo ancora.</p>
<p>David ChalmersÂ illustra molto bene il problema della coscienza in <a href="https://www.ted.com/talks/david_chalmers_how_do_you_explain_consciousness/transcript">questo
video</a>.
Naturalmente c&rsquo;Ã¨ anche chi, come Massimo Pigliucci, considera quello della
coscienzaÂ <a href="https://philpapers.org/archive/PIGWHP.pdf">un falso problema</a>. Per
quanto si possa essere d&rsquo;accordo con Pigliucci, il problema non diventa meno
affascinante.</p>
<p>Abbiamo un&rsquo;idea di quali sono le aree del cervello che si occupano
dell&rsquo;acquisizione dei vari tipi di segnali sensoriali (non abbiamo solo vista e
udito: bisogna considerare anche tatto, gusto e olfatto). Sappiamo anche in
quali zone avvengono i processi piÃ¹ avanzati di sintesi: ad esempio, nel caso
dell&rsquo;orecchio, possiamo distinguere tre tipi di corteccia uditiva:</p>
<ul>
<li><em>primaria:</em>Â quest&rsquo;area Ã¨ principalmente responsabile della capacitÃ  di
ascoltare. Il suo scopo Ã¨ di processare aspetti del suono come volume e
altezza;</li>
<li><em>secondaria:</em>Â  quest&rsquo;area processa i pattern armonici, melodici e ritmici;</li>
<li><em>terziaria:</em> i ricercatori sostengono che qui avviene l&rsquo;integrazione, la
sintesi dell&rsquo;esperienza che chiamiamo musica.</li>
</ul>
<p>Un altro degli aspetti affascinanti dell&rsquo;udito trovo sia il suo effetto
apparentemente immediato, nonostante la notevole complessitÃ  dei meccanismi
costitutivi.</p>
<p>Quando udiamo inaspettatamente un fortissimo rumore, un riflesso istantaneo
attiva i muscoli in un sobbalzo di spavento. Questo fenomeno ha a che fare con
qualcosa di primitivo, istintivo, subcosciente e assimilabile a ciÃ² che rende
possibile al cuore di battere anche in assenza di uno stimolo apparente: una
sorta di firmware che, in modo molto primitivo, entra in funzione ancora prima
che il sistema operativo sia caricato rendendo disponibili tutte le
funzionalitÃ  del computer.</p>
<p>Per restare nel campo dei computer, in informatica lâ€™analisi di un suono
richiede di scomodare un consistente numero di concetti matematici come le
temibili trasformate di Fourier. Ma se ascoltiamo un musicista suonare in
unâ€™altra stanza, sappiamo subito che il <em>timbro</em> Ã¨ di un pianoforte, che le
mani del pianista si muovono a una certa <em>altezza</em> sulla tastiera, producendo
un <em>volume</em> piÃ¹ o meno forte e con una certa <em>durata</em>. Tutto ciÃ² avviene in una
frazione di secondo e soprattutto senza importunare Fourier!</p>
<p>Quando impariamo a guidare lâ€™auto, dobbiamo prima prendere confidenza con
diversi pedali, il cambio e il volante, ma dopo qualche mese di pratica
possiamo tranquillamente cambiare le marce mentre stiamo parlando con il
passeggero. Comâ€™Ã¨ possibile che un gesto che richiede intensi sforzi sensoriali
e di coordinazione motoria diventi poiÂ  naturale e automatico?</p>
<p>La scienza s&rsquo;Ã¨ fatta una mezza idea al riguardo ma una cosa la sappiamo con
assoluta certezza: tramite esercizi di difficoltÃ  progressiva che insistono
sulla parte cosciente, Ã¨ possibile allenare la mente ad acquisire capacitÃ 
istintive che richiedono la coordinazione fluida di piÃ¹ sensi e muscoli.</p>
<p>Se stai leggendo questo testo Ã¨ perchÃ© ti Ã¨ stato insegnato prima lâ€™alfabeto,
poi hai imparato a leggere e scrivere il tuo nome, poi le prime parole, poi
frasi, paragrafi, capitoli e cosÃ¬ via.</p>
<blockquote>
<p>Non imorpta in che oridne apapaino le letetre in una paolra, lâ€™uinca csoa
imnorptate Ã¨ che la pimra e la ulimta letetra sinao nel ptoso gituso. Il
riustlato puÃ² serbmare mloto cnofuso e noonstatne ttuto si puÃ² legerge sezna
mloti prleobmi.</p>
</blockquote>
<p>Riesci a leggere il testo appena citato perchÃ© la mente specializzata nella
lettura puÃ² elevarsi a un livello istintivo dal quale Ã¨ possibile osservare
parole, frasi e infine il pensiero espresso senza preoccuparsi troppo dei
dettagli. CiÃ² che sorprende Ã¨ che il pensiero sia veicolato correttamente anche
in assenza di correttezza formale del testo.</p>
<p>Immaginiamo di osservare dei volumi raccolti in un mobile adibito a libreria.
Anche se non ce ne rendiamo conto, il senso della vista ci comunica la forma ed
il materiale del mobile, il dettaglio dei dorsi accatastati, i loro colori e la
forma dei caratteri che indicano titolo e autore. In una frazione di secondo
siamo perfettamente consci che quellâ€™oggetto Ã¨ una libreria, che la grafica dei
dorsi suggerisce dei testi di informatica e che in totale i volumi saranno una
trentina. Non abbiamo bisogno della parola libreria per sapere con cosa abbiamo
a che fare perchÃ©, semplicemente, lo sappiamo a priori. Solo se abbiamo la
necessitÃ  di comunicare il concetto di libreria useremo la parola specifica
nella lingua del nostro interlocutore.</p>
<p>Se in una libreria abbiamo la necessitÃ  di trovare un certo volume, possiamo
cercarne il titolo. Con una semplice osservazione ci rendiamo conto se i volumi
sono disposti in ordine alfabetico. Se torniamo con frequenza a consultare
quello specifico scaffale, alla fine ricorderemo che contiene un volume sulla
programmazione C, uno sulla crittografia e uno sui database relazionali.</p>
<p>Il sistema che rende possibili, immediate e istintive le esperienze basate sul
senso della vista che ho appena descritto Ã¨ lo stesso che rende possibile la
trascrizione di una sinfonia grazie al senso dellâ€™udito.</p>
<p>Sarei in grado di trascrivere la Nona di Beethoven dopo un solo ascolto?
Sfortunatamente no. Il motivo Ã¨ lo stesso per cui non Ã¨ sufficiente un solo
sguardo per identificare e memorizzare tutti i testi di tutti i volumi presenti
in una biblioteca. Per un compito cosÃ¬ impegnativo abbiamo bisogno di
esercitare la memoria, il tempo a disposizione, la pazienza e lâ€™educazione
musicale: tutti elementi che, ahimÃ¨, siamo sempre meno motivati a frequentare.</p>
<p>Quando localizziamo un libro in uno scaffale, lo preleviamo, lo leggiamo e ne
acquisiamo i contenuti, nessuno verrÃ  a batterci le mani perchÃ© abbiamo
compiuto una azione avvolta da unâ€™aura di mistero. Quasi tutti si affidano ad
una scuola guida per imparare a guidare un mezzo a motore col cambio manuale ma
nessuno ci fermerÃ  nel traffico per congratularsi della nostra coordinazione
psicomotoria. Eppure, per qualche assurdo motivo, pur basandosi sugli stessi
meccanismi sensoriali e cognitivi, la capacitÃ  di riconoscere i suoni ci sembra
rientrare nel campo della magia nera piÃ¹ che nelle possibilitÃ  ben conosciute e
consolidate di unâ€™educazione progressiva.</p>
<p>Certo, la vista e lâ€™udito sono sensi differenti e probabilmente da un punto di
vista evolutivo la vista ha goduto di un vantaggio innegabile: Ã¨ molto piÃ¹
facile fuggire da un predatore avendolo visto a grande distanza che avendone
ascoltato i passi quando ormai siamo diventati il suo spuntino. Questo
spiegherebbe anche perchÃ©, giÃ  nel cenozoico, i musicisti non godevano di
grande considerazione.</p>
<p>No, scherzo: la musica Ã¨ sempre stata un grande veicolo di aggregazione
sociale, ben prima dei mega concerti di Vasco. Purtroppo non ci Ã¨ dato sapere
cosa suonassero gli australopitechi nelle notti stellate africane ma la scienza
Ã¨ abbastanza concorde sul fatto che gli accendini non fossero ancora stati
inventati a quel tempo, privando cosÃ¬ le ballate del loro irresistibile fascino
romantico. Le droghe invece c&rsquo;erano giÃ , anche se, in mancanza di accendini,
per fumare una canna dovremo attendere tempi piÃ¹ illuminati ed una legislazione
antiproibizionista.</p>
<p>Un altro aspetto interessante dei nostri sensi Ã¨ la loro interdipendenza. In
<a href="https://www.psychologytoday.com/us/blog/talking-apes/201511/hearing-our-eyes-seeing-our-ears">questo
articolo</a>
possiamo vedere un video in cui un cieco guida la bicicletta su strada usando
l&rsquo;ecolocazione, dimostrando come l&rsquo;udito possa supplire alle funzionalitÃ  di
orientamento cui noi piÃ¹ fortunati abbiamo accesso tramite la vista. PiÃ¹ sotto
viene illustrato il bizzarro effetto McGurk: a paritÃ  di suono emesso, il
cervello percepisce due suoni distinti a seconda del labiale osservato: in
questo caso la vista scavalca a piÃ¨ pari l&rsquo;udito.</p>
<p>Questa interdipendenza dei sensi nella musica Ã¨ importante perchÃ© suonare uno
strumento coinvolge anche il tatto e la vista. Un sassofonista non puÃ² vedere
lo strumento durante la performance ma avrÃ  una visualizzazione mentale della
diteggiatura, dell&rsquo;emissione di aria e della sensazione tattile sia delle dita
sui tasti che della pressione esercitata dal labbro inferiore sull&rsquo;ancia.
Passando da uno sax all&rsquo;altro, il musicista ha bisogno di abituarsi alle
piccole differenze di posizione dei tasti e alla loro corsa dissimile. Nulla
che un po' di esercizio non possa risolvere, ma lo smarrimento iniziale Ã¨
dovuto alla sensazione tattile poco familiare. Tutt&rsquo;altro discorso Ã¨ il cambio
di imboccatura. Togliete ad un sassofonista la sua imboccatura abituale ed
avrete una persona in preda all&rsquo;angoscia cosmica.</p>
<p>Dal punto di vista dell&rsquo;educazione musicale il pianoforte Ã¨ senz&rsquo;altro lo
strumento ideale perchÃ© la tastiera rende disponibile visivamente tutte le
possibilitÃ  sonore. Se pensiamo ai cantanti, l&rsquo;emissione della voce si basa su
dei muscoli che modificano la tensione delle corde vocali e, di conseguenza,
l&rsquo;altezza dei suoni, ma non Ã¨ possibile osservare direttamente nÃ© i muscoli nÃ©
le corde vocali in azione (ci sarebbe la laringostroboscopia ma non mi sembra
un metodo molto pratico per un uso didattico musicale). I cantanti hanno
senz&rsquo;altro una memoria muscolare ma hanno anche bisogno di un riferimento
mentale per riprodurre un intervallo. Ecco perchÃ© viene consigliato lo studio
almeno elementare del pianoforte: per sviluppare quella capacitÃ  di
concettualizzazione che serve a supplire all&rsquo;apparente mancanza di concretezza
del mondo dei suoni.</p>
<p>Non Ã¨ possibile vedere un suono ma visualizzare mentalmente la pressione di un
tasto del piano Ã¨ possibile ed Ã¨ anche possibile immaginarne il suono prodotto
usando la nostra voce interiore, la stessa che in questo momento sta leggendo
queste parole. Se possiamo visualizzare la pressione di un secondo tasto ed
immaginarne il suono, abbiamo appena posato il primo mattone per costruire
l&rsquo;edificio mentale sonoro, abbiamo cioÃ¨ concettualizzato un intervallo a
livello cognitivo.</p>
<p>Ci sono pianisti classici che, dopo essersi allenati a lungo per un concerto,
possono sedere, chiudere gli occhi ed immaginare l&rsquo;intera performance senza
neanche toccare lo strumento. Li vedreste muovere le dita, perchÃ© la
concettualizzazione riguarda anche la corteccia motoria. La stessa cosa sarebbe
naturalmente possibile ad esempio per un sassofonista. Ãˆ chiaro che la
performance richiede la padronanza completa del tatto e dei muscoli ma la
visualizzazione mentale non Ã¨ meno potente perchÃ© richiede una
interiorizzazione del materiale ad un livello di coscienza profondo e
istintivo.</p>
<p>Â«Ma mia nipote di Ercolano sa cantare benissimo Anema e Core pur non avendo mai
visto un pianoforte in vita suaÂ» direte voi. Sono molto contento e simpatizzo
con la nipote e, se il suo desiderio Ã¨ quello di cantare Anema e Core o
qualsiasi altro pezzo della tradizione napoletana, il tipo di
concettualizzazione della bambina va benissimo, anche non rifacendosi al
pianoforte. Per uno studio formale tuttavia, il pianoforte Ã¨ utilissimo sia per
riprodurre e verificare gli intervalli, sia per l&rsquo;accompagnamento. La bambina
di Ercolano potrÃ  anche imitare lo scat di Ella Fitzgerald senza sapere cos&rsquo;Ã¨
un tritono ma se un giorno volesse imparare a improvvisare, avrebbe bisogno di
lavorare su concetti del linguaggio musicale per i quali il pianoforte sarebbe
senz&rsquo;altro indispensabile.</p>
<p>In realtÃ , molti musicisti fanno ear training con la pratica quotidiana dello
strumento senza neanche rendersene conto. E va benissimo anche questa modalitÃ 
di apprendimento. Ma, per improvvisare una frase musicale riproducendola
istantaneamente sullo strumento, serve la padronanza istintiva del linguaggio
che solo un orecchio ben allenato possiede.</p>
<p>Pensa a quale dovesse essere la padronanza di linguaggio e concettualizzazione
di Beethoven per aver scritto <a href="https://www.youtube.com/watch?v=rOjHhS5MtvA">alcune fra le sue pagine piÃ¹
memorabili</a> in un periodo in cui
era ormai diventato completamente sordo. Oppure pensa a Bach che, davanti a
Federico il Grande, Re di Prussia, improvvisÃ² una <a href="https://it.wikipedia.org/wiki/Offerta_musicale">fuga a quattro
voci</a> su un tema che lo stesso
re gli aveva appena proposto.</p>
<p>L&rsquo;improvvisazione ha avuto grandissima importanza nella musica che oggi
chiamiamo classica (non credo che Bach, Beethoven o Mozart pensassero di
scrivere musica classica, per loro era musica e basta). Sappiamo con certezza
che ognuno dei grandi della musica era prima di tutto un grande improvvisatore.
L&rsquo;improvvisazione Ã¨ rimasta un&rsquo;arte a lungo praticata in ambito europeo e ne
rimane traccia nelle numerose opere con accompagnamento di <a href="https://it.wikipedia.org/wiki/Basso_continuo">basso
continuo</a>.  Questo nome un po'
bizzarro indica in realtÃ  una pratica assimilabile a quella moderna di indicare
soltanto gli accordi, lasciando all&rsquo;esecutore la libertÃ  di scegliere rivolti,
voicing, ecc.</p>
<p>A un certo punto, per motivi di praticitÃ , la didattica ha imposto un modello
di educazione musicale in grado di produrre interpreti preparatissimi dal punto
di vista dell&rsquo;esecuzione ma purtroppo incapaci di produrre musica autonomamente
usando un proprio linguaggio. La padronanza del linguaggio musicale Ã¨ stata
allora relegata alla Ã©lite dei compositori. Quando l&rsquo;Europa ha smesso di
praticare l&rsquo;improvvisazione, per qualche motivo, dall&rsquo;altra parte dell&rsquo;Oceano
Atlantico, alcuni musicisti ne hanno ripreso la tradizione, producendo
probabilmente l&rsquo;unica vera forma d&rsquo;arte genuinamente americana: la musica Jazz.</p>
<p>La storia dell&rsquo;improvvisazione ha conosciuto nel BeBop un&rsquo;epoca d&rsquo;oro. Andando
ad analizzare formalmente una qualsiasi registrazione di Charlie Parker, ci
troviamo di fronte ad una tale padronanza di linguaggio che non ha nulla da
invidiare alla tradizione classica europea. Parker e i suoi colleghi
conoscevano infatti molto bene le opere di Ravel, Bartok, Debussy, Stravinsky,
ecc. La musica improvvisata ha vissuto poi una nuova stagione con i quintetti
di Miles Davis, le fasi dell&rsquo;ultimo John Coltrane e il free jazz di Ornette
Coleman, solo per fare i nomi piÃ¹ conosciuti.</p>
<p>La musica improvvisata oggi Ã¨ piÃ¹ viva che mai. La sperimentazione Ã¨ tutt&rsquo;altro
che finita ed i risultati sono molto spesso apprezzabili anche ai non addetti
ai lavori. Ãˆ in campo un grande fermento ed il fatto che la musica piÃ¹ in
generale goda di cosÃ¬ scarsa considerazione nelle istituzioni contemporanee Ã¨
una amara considerazione che spero venga presto soppiantata da una mentalitÃ 
collettiva in cui la sia la bellezza a guidare la quotidianitÃ  e non piÃ¹ il
profitto. Ma lasciamo per ora da parte lo spirito rivoluzionario e torniamo
all&rsquo;educazione musicale.</p>
<h2 id="gli-elementi-dellear-training">Gli elementi dell&rsquo;ear training</h2>
<p>In musica, la base da cui si parte per lo studio dell&rsquo;ear training Ã¨
l&rsquo;intervallo, ovvero la distanza fra due note.Â L&rsquo;intervallo puÃ² essere
orizzontale (o melodico) quando i due suoni sono eseguiti in sequenza, oppure
verticale (o armonico) quando i suoni sono eseguiti contemporaneamente.
Orizzontale e verticale si riferiscono al modo in cui si scrive la musica.
Bisogna imparare entrambi i tipi di intervallo, perchÃ© uno serve per la
comprensione delle melodie e l&rsquo;altro per la comprensione degli accordi.</p>
<p>Gli intervalli seguono delle vetuste regole di nomenclatura. I piÃ¹ giovani
direbbero che i loro nomi sono parecchio incasinati e, in effetti, guardando la
<a href="https://it.wikipedia.org/wiki/Intervallo_(musica)#Tavola_degli_intervalli">tavola su
wikipedia</a>,
non gli si puÃ² proprio dare torto, specie quando si apprende dell&rsquo;esistenza di
intervalli ultra deficienti. Per semplificarci la vita, riporto un elenco
minimale degli intervalli che troviamo all&rsquo;interno di un&rsquo;ottava:</p>
<ul>
<li>unisono (stesso suono, nessun intervallo)</li>
<li>seconda minore (mezzo tono)</li>
<li>seconda maggiore (un tono)</li>
<li>terza minore (un tono e mezzo)</li>
<li>terza maggiore (due toni)</li>
<li>quarta giusta (due toni e mezzo)</li>
<li>quarta aumentata (tre toni)</li>
<li>quinta giusta (tre toni e mezzo)</li>
<li>quinta aumentata (quattro toni)</li>
<li>sesta maggiore (quattro toni e mezzo)</li>
<li>settima minore (cinque toni)</li>
<li>settima maggiore (cinque toni e mezzo)</li>
<li>ottava giusta (sei toni)</li>
</ul>
<p>Come vedi, il nostro elenco mostra 13 diversi intervalli. Ora, l&rsquo;unisono non Ã¨
un vero e proprio intervallo ma una convenzione per indicare che due suoni
hanno la stessa altezza ed equivale a dire intervallo zero. Restano quindi 12
intervalli. Di questi 12 intervalli, almeno 7 li conosci giÃ  bene perchÃ©, a
meno che tu non abbia vissuto in una caverna su un continente inesplorato,
sappi che la quasi totalitÃ  della musica cui siamo esposti quotidianamente si
basa sui suoni della scala maggiore.</p>
<p>Nella tonalitÃ  di DO, la scala maggiore Ã¨ composta dalle note: DO, RE, MI, FA,
SOL, LA, SI, DO. Osserviamo la tastiera del pianoforte:</p>
<p><img src="/images/posts/tastiera.jpg" alt="La tastiera del pianoforte"></p>
<p>La scala maggiore di DO, sul pianoforte, Ã¨ composta interamente da tasti
bianchi. Facile, no? Suonala un po' di volte, prima a salire e poi a scendere.
Cantala mentre la stai suonando. Magari non sei Bobby McFerrin ma, se ti
impegni abbastanza, vedrai che puoi intonare tutte le note senza grosse
difficoltÃ . Prova anche a immaginare di cantare le note con la tua voce
interiore, senza effettivamente cantare ma usando solo la testa. Ti renderai
conto che Ã¨ molto piÃ¹ facile rispetto a cantare perchÃ© nel cervello non devi
controllare anche i muscoli delle corde vocali. Continua cosÃ¬ ancora per un
po': canta, poi immagina di cantare, fino a quando la tua voce interiore puÃ²
intonare perfettamente tutte le note.</p>
<p>Ora mischia le note un po' a caso, sempre usando solo i tasti bianchi. Fai caso
a come alcune combinazioni di suoni sono piÃ¹ dissonanti, ovvero creano una
tensione che ti aspetti venga in qualche modo risolta.</p>
<p>Ti faccio un esempio: suona le note DO, SOL, prima una, poi l&rsquo;altra. Ora
suonale insieme. La qualitÃ  di questo intervallo Ã¨ consonante, cioÃ¨ le due note
stanno bene insieme e non sembrano creare una tensione che va in qualche modo
risolta. Questo Ã¨ un intervallo di quinta giusta. Se numerassimo le note in
sequenza a partire dal DO con il numero 1, avremmo:</p>
<ol>
<li>DO</li>
<li>RE</li>
<li>MI</li>
<li>FA</li>
<li>SOL</li>
<li>LA</li>
<li>SI</li>
<li>DO</li>
</ol>
<p>Ecco perchÃ© diciamo che DO-SOL Ã¨ un intervallo di quinta: perchÃ© si trova sul
quinto grado della scala maggiore nella tonalitÃ  di DO. Cosa vuol dire tonalitÃ 
di DO? Vuol dire che abbiamo preso la nota DO come riferimento ed abbiamo
costruito il nostro sistema di suoni, nel nostro caso la scala maggiore, a
partire da quella nota.</p>
<blockquote>
<p>Il mio amico Johnny, batterista che lavorava in un negozio di strumenti
musicali, raccontava sempre un aneddoto riguardo una festa di paese in cui un
signore chiese di far cantare la propria figlia sul palco e, alla domanda su
quale tonalitÃ  volesse per la canzone, il signore rispose orgoglioso: Â«la
migliore!Â».</p>
</blockquote>
<p>Se andassimo ad analizzare gli intervalli che separano fra di loro le note
della scala maggiore di DO, vedremmo che fra DO e RE c&rsquo;Ã¨ un tono, fra RE e MI
un tono, fra MI e FA un semitono, fra FA e SOL un tono, fra SOL e LA un tono,
fra LA e SI un tono e fra SI e DO un semitono. Lo schema costruttivo della
scala maggiore puÃ² quindi essere riassunto nella sequenza:</p>
<ul>
<li>tono</li>
<li>tono</li>
<li>semitono</li>
<li>tono</li>
<li>tono</li>
<li>tono</li>
<li>semitono</li>
</ul>
<p>Usando questo schema possiamo costruire la scala maggiore in qualsiasi
tonalitÃ . Ad esempio, prendendo come riferimento il FA#, le note della scala di
FA# maggiore sarebbero: FA#, SOL#, LA#, SI, DO#, RE#, MI#, FA#. Il fatto che ci
siano tanti diesis Ã¨, ahimÃ¨, di nuovo un problema di nomenclatura vetusta, ma
non facciamoci ingannare dalla apparente complessitÃ  dei nomi delle note che
stiamo usando: la scala maggiore Ã¨ pur sempre una scala maggiore ed il rapporto
e la semplicitÃ  interna dei suoi suoni sono identici ai suoni che sui tasti
bianchi del pianoforte abbiamo riconosciuto come semplici e familiari. Abbiamo
solo cambiato il punto di vista e introdotto un bel po' di tasti neri ma i
rapporti interni alle note che costituiscono la nostra scala si basano sempre
ed esclusivamente su due intervalli: quello di tono e quello di semitono.</p>
<p>Quello che sto cercando cosÃ¬ faticosamente di dire Ã¨ che, se sei in grado di
cantare una scala maggiore, sei anche giÃ  in possesso di tutto ciÃ² che ti serve
per riconoscere e riprodurre l&rsquo;intervallo di semitono e quello di tono. Magari
non sapevi cosa fosse una scala maggiore o un semitono ma sapevi giÃ  cantare il
materiale.</p>
<p>Per ogni nota della scala maggiore, possiamo sia considerare l&rsquo;intervallo di
ogni nota rispetto alla precedente, come abbiamo appena fatto, ma possiamo
anche considerare gli intervalli tra la nota che abbiamo preso come riferimento
per la tonalitÃ  (DO) e le note che si trovano su ogni grado della scala.</p>
<p>Vedremo che tra DO e RE c&rsquo;Ã¨ un intervallo di un tono (seconda maggiore), tra DO
e MI due toni (terza maggiore), tra DO e FA due toni e mezzo (quarta giusta),
tra DO e SOL tre toni e mezzo (quinta giusta), tra DO e LA quattro toni e mezzo
(sesta maggiore), tra DO e SI cinque toni e mezzo (settima maggiore) e tra DO e
DO sei toni (un&rsquo;ottava).</p>
<p>Non farti spaventare dai nomi delle cose: finora stiamo sempre e solo parlando
dei suoni dei tasti bianchi del pianoforte. Tutta la complessitÃ  legata ai nomi
dei concetti musicali Ã¨ dovuta esclusivamente alla necessitÃ  di comunicare in
maniera inequivocabile un&rsquo;idea. Se vivessi in una torre d&rsquo;avorio, Ã¨ vero che mi
troverei nella spiacevole condizione di dover spiegare agli agenti della
Protezione Animali, della Dogana e dell&rsquo;Agenzia delle Entrate dove ho trovato
tanti elefanti, ma non avrei il problema di dover usare 6 diesis nella scala
maggiore di FA#. Darei a ognuno dei 12 semitoni dell&rsquo;ottava un nome unico, ad
esempio: AW, KA, WA, WE, OH, PASQUALE, ecc. E cosÃ¬ sarei felice, almeno fin
quando non sarei costretto a scendere dalla mia torre d&rsquo;avorio per convincere
qualcuno a suonare il mio quartetto d&rsquo;archi in OH fenicio.</p>
<blockquote>
<p>A proposito di elefanti e tasti bianchi, sai che una volta i tasti bianchi del
pianoforte erano fatti d&rsquo;avorio? Fortunatamente per i nostri amici mammiferi
proboscidati, oggi i tasti bianchi vengono prodotti con un misto di legno e
materie plastiche sempre piÃ¹ eco-sostenibili.</p>
</blockquote>
<p>L&rsquo;esercizio che ti propongo ora serve per interiorizzare meglio gli intervalli
della scala maggiore. Se prima abbiamo giocato piÃ¹ o meno a caso con i tasti
bianchi, ora andremo ad esaminare gli intervalli piÃ¹ semplici rispetto al
riferimento che ci siamo dati, ovvero la nota DO.</p>
<p>Partendo da DO, il primo intervallo che incontriamo Ã¨ l&rsquo;unisono, ovvero la nota
DO seguita dalla stessa nota. Questo non dovrebbe essere un intervallo
difficile da riconoscere perchÃ© l&rsquo;altezza del suono non sta cambiando, stiamo
solo inserendo una pausa tra il primo ed il secondo suono.</p>
<p>L&rsquo;intervallo successivo Ã¨ DO-RE. Si tratta di un intervallo di un tono o di
seconda maggiore. Suona prima il riferimento (DO) e poi la nota dell&rsquo;intervallo
(RE). Queste due note sono molto vicine e il loro suono diventa strano solo
quando le suoniamo contemporaneamente. Prova a suonare DO e RE insieme: buffo,
eh? Ãˆ come se dovesse succedere qualcosa. Ascolta bene i
<a href="https://it.wikipedia.org/wiki/Battimenti_(musica)">battimenti</a>. Senti come
quelle che fino a un secondo fa consideravamo solo due banali note suonate
insieme, ora che stai prestando particolare attenzione, presentano una
ricchezza armonica per nulla banale?</p>
<p>Se segui lo stesso procedimento con gli altri gradi della scala, vedrai che
DO-MI (terza maggiore) e DO-SOL (quinta giusta) sono intervalli particolarmente
consonanti, cioÃ¨ suonano bene mentre gli altri sono piÃ¹ dissonanti nel contesto
del nostro riferimento che Ã¨ la tonalitÃ  di DO maggiore. L&rsquo;intervallo di quarta
giusta ad esempio (la nota FA) ha una naturale tendenza a voler risolvere sulla
terza maggiore (MI), come si trovasse in un&rsquo;area poco familiare e volesse
tornare a casa per essere rassicurata. Stessa cosa dicasi per la nota SI
(settima maggiore), la quale vuole muoversi verso il piÃ¹ vicino DO.</p>
<p>Soffermati a lavorare su questi intervalli della scala maggiore, suonandoli
prima in maniera melodica (prima una nota, poi l&rsquo;altra) e poi in maniera
armonica (due note insieme). Canta sempre e usa la tua voce interiore quando
fai questi esercizi. Ovviamente non puoi cantare un intervallo armonico (due
note insieme) ma cantarlo in maniera melodica ti aiuterÃ  a distinguere le
singole note che lo compongono.</p>
<p>La tua voce interiore dovrebbe essere invece in grado di immaginare i due suoni
contemporaneamente. Se non riesci, soffermati prima a pensare al primo suono
per qualche secondo, immaginando di mantenerlo mentre fai partire il secondo
suono. Per qualcuno questo esercizio mentale Ã¨ piÃ¹ difficile che per altri
perciÃ² non preoccuparti se non riesci subito. Fai leva sulla tua pazienza,
insisti con calma e decisione e vedrai che ti sarÃ  possibile riuscire.</p>
<p>Quando ti sarai esercitato abbastanza (dove abbastanza Ã¨ variabile da persona a
persona: a volte bastano minuti, altre volte sono necessari mesi) puoi provare
l&rsquo;esercizio successivo che consiste nel darti un riferimento (ad esempio puoi
suonare la nota DO) e provare a immaginare quale suono uscirÃ  premendo un altro
tasto bianco. Ad esempio, per prima cosa suono la nota DO e la canto, poi penso
al tasto FA e cerco di immaginare quale suono sarÃ  prodotto dalla pressione del
tasto, poi canto la nota che penso sia il FA e infine la suono per verificare
che sia corretta. PoichÃ© ti sei precedentemente esercitato con la scala
maggiore a un&rsquo;ottava, dovresti essere in grado di immaginare i suoni di tutti i
tasti bianchi compresi da DO al DO dell&rsquo;ottava successiva. Prova anche a
cambiare il riferimento, ovvero non suonare sempre DO come prima nota: usane
un&rsquo;altra sempre scelta a caso.</p>
<p>L&rsquo;esercizio che ti propongo ora serve a verificare in modo inequivocabile che
hai interiorizzato la scala maggiore ad un livello istintivo. Genera un po' di
gruppi di numeri da 1 a 8. Per comoditÃ  te ne riporto qui sotto alcuni set di
esempio ma puoi <a href="https://www.random.org/integer-sets/?sets=10&amp;num=5&amp;min=1&amp;max=8&amp;seqnos=on&amp;commas=on&amp;order=index&amp;format=html&amp;rnd=new">generarne quanti ne
vuoi</a>.
Ogni set rappresenta una melodia ed ogni numero del set rappresenta il grado
della scala. Ad esempio:Â 2, 8, 1, 5, 6 sarebbero RE, DO, DO, SOL, LA, dove 8
sarebbe il DO piÃ¹ alto e 1 il DO piÃ¹ basso.</p>
<pre><code>Set 1: 8, 7, 1, 3, 4
Set 2: 5, 4, 1, 3, 2
Set 3: 5, 4, 2, 3, 7
Set 4: 7, 6, 1, 8, 2
Set 5: 6, 5, 8, 2, 1
Set 6: 2, 1, 3, 4, 8
Set 7: 4, 5, 3, 8, 2
Set 8: 5, 6, 8, 7, 4
Set 9: 8, 5, 4, 3, 2
Set 10: 6, 2, 7, 1, 8
</code></pre><p>L&rsquo;esercizio consiste nel darti un riferimento suonando il DO e nel cantare le
melodie (i set) rappresentate dai numeri.</p>
<p>Anche in questo caso ti renderai presto conto che Ã¨ molto piÃ¹ facile immaginare
i suoni che cantarli. L&rsquo;intonazione Ã¨ un problema concreto solo se vuoi
cantare, credimi. Ai fini dell&rsquo;ear training ti posso assicurare che una
intonazione vocale incerta non Ã¨ necessariamente sintomo di cattiva
comprensione di un concetto musicale o una melodia. Per quanto mi sia facile
improvvisare una frase bebop al piano, cantarla sarebbe tutta un&rsquo;altra storia
perchÃ© non mi sono mai esercitato con la voce. Sono sicuro che alcuni miei
amici preferirebbero essere crocifissi piuttosto che dovermi sentire cantare.</p>
<p>Una volta acquisita una padronanza istintiva della scala maggiore, non ci resta
che aggredire i tasti neri per completare cosÃ¬ i 12 suoni ed entrare nel
meraviglioso mondo della scala cromatica: un mondo idilliaco in cui tutti gli
intervalli godono di pari diritti e consonanza e dissonanza sono solo vecchi
concetti da relegare ai matusa della tonalitÃ .</p>
<p>Ho una buona notizia per te: gli intervalli che nella scala maggiore di DO sono
rappresentati dai tasti neri del piano, sono giÃ  presenti sotto altra forma
all&rsquo;interno della stessa scala maggiore. Andiamo a esaminarli:</p>
<ul>
<li>l&rsquo;intervallo di semitono (DO-DO#), la seconda minore, Ã¨ presente nella scala
maggiore di DO come MI-FA e SI-DO;</li>
<li>l&rsquo;intervallo di un tono e mezzo (DO-RE#), la terza minore, Ã¨ presente nella
scala maggiore di DO come RE-FA, MI-SOL, LA-DO e SI-RE;</li>
<li>l&rsquo;intervallo di tre toni (DO-FA#), la quarta aumentata, Ã¨ presente nella
scala maggiore di DO come FA-SI e SI-FA;</li>
<li>l&rsquo;intervallo di quattro toni (DO-SOL#), la quinta aumentata, Ã¨ presente nella
scala maggiore di DO come MI-DO, LA-FA e SI-SOL;</li>
<li>l&rsquo;intervallo di cinque toni (DO-SIb), la settima minore, Ã¨ presente nella
scala maggiore di DO come RE-DO, MI-RE, SOL-FA, LA-SOL e SI-LA.</li>
</ul>
<p>Il tuo compito quindi resta quello di visualizzare ogni intervallo in ogni
tonalitÃ . Questo Ã¨ un esercizio che, se suoni uno strumento diverso dal piano,
troverai molto utile fare anche sul tuo strumento e ti aprirÃ  la strada alla
visualizzazione mentale di tutte le possibilitÃ  sonore a tua disposizione.</p>
<p>Il mio consiglio Ã¨ di seguire un ciclo annidato in cui al primo livello si
itera sugliÂ  intervalli e al secondo sulla scala cromatica, partendo dalla nota
piÃ¹ bassa sullo strumento fino alla nota piÃ¹ alta. Lo scrivo in pseudo-codice
per gli informatici e poi in inglese per gli esseri umani:</p>
<pre><code>foreach interval in (2m, 2M, 3m, 3M, 4, 4#, 5, 5#, 6, 7m, 7M, 8) {
  foreach note in (instrument_range) {
    play interval from note Â 
  }
}
</code></pre><p>Una persona sana di mente avrÃ  giÃ  capito che l&rsquo;esecuzione completa
dell&rsquo;esercizio richiede almeno una mezz&rsquo;oretta ed una pazienza inversamente
proporzionale al tempo speso nell&rsquo;esercizio stesso (in altre parole: piÃ¹ ti
eserciti, piÃ¹ diventa facile).</p>
<p>Se immettessimo questo pseudo-codice in un ipotetico computer musicale,
specificando l&rsquo;estensione naturale del sassofono, la cui nota piÃ¹ bassa Ã¨ SI
bemolle e la piÃ¹ acuta il FA#, la sua esecuzione produrrebbe il seguente
output:</p>
<pre><code>play 2m from Bb (Bb-B)
play 2m from B (B-C)
play 2m from C (C-C#)
...
play 2m from F (F-F#)
play 2m from F# (F#-G)
play 2M from Bb (Bb-C)
play 2M from Bb (B-C#)
play 2M from C (C-D)
...
</code></pre><p>Una variante interessante consiste nell&rsquo;iterare sul circolo delle quinte
piuttosto che sulla scala cromatica. Se te lo stai chiedendo, nei simboli degli
intervalli, m sta per minore, M per maggiore e # sta per aumentato. Ho scritto
tra parentesi le due note dell&rsquo;intervallo. I nomi delle note seguono la
convenzione anglosassone per comoditÃ  mia. Se non conosci la convenzione
anglosassone, questo Ã¨ un buon momento per impararla perchÃ© nessuno scrive
spartiti usando la convenzione italiana, nemmeno noi italiani.</p>
<p>Una variante ancora piÃ¹ interessante consiste nel fare l&rsquo;intero esercizio a
mente, immaginando di suonare il tuo strumento. Sappi perÃ² che non mi riterrÃ²
responsabile nel caso l&rsquo;esercizio ti rendesse necessarie delle cure
psichiatriche.</p>
<p>Una alternativa un po' piÃ¹ compatibile con la sanitÃ  mentale consisterebbe nel
limitarsi alla scala maggiore, sempre nell&rsquo;estensione di un&rsquo;ottava, lavorando
perÃ² su tutte le 12 tonalitÃ .</p>
<p>Naturalmente, nel mondo reale, gli intervalli non si limitano a un&rsquo;ottava ma
confido che, se sei arrivato fin qui, non avrai problemi a esercitarti sugli
intervalli piÃ¹ remoti, tenendo presente che l&rsquo;ottava Ã¨ un ottimo riferimento
per i salti di, appunto, ottava. Il mondo reale inoltre non si limita all&rsquo;uso
della scala maggiore (per fortuna, altrimenti sai che noia&hellip;) ma, oltre ai
vari modi (fra i quali compare anche la scala minore naturale), dovresti
prendere familiaritÃ  anche con la scala minore melodica e armonica, con la
scala diminuita (8 suoni, semitono-tono) e quella aumentata (6 suoni, tutti
toni interi). Tieni presente che di scale diminuite ne esistono 3: tutte le
altre sono riconducibili a una precedente scala diminuita ma partendo da una
nota diversa. Stesso discorso per la scala esatonale di cui esistono solo 2
versioni.</p>
<p>Per il riconoscimento degli accordi il discorso si complica un bel po' e non
saprei come meglio aiutarti se non dicendoti di scomporre mentalmente gli
accordi negli intervalli delle singole note costitutive. Allenati a riconoscere
prima le triadi delle famiglie maggiori, minori, aumentate e diminuite, poi
passa alle quadriadi (gli accordi che arrivano alla settima per capirci) e cosÃ¬
via.</p>
<p>Avrai notato che in tutti gli esercizi faccio sempre usare un riferimento
iniziale. L&rsquo;orecchio relativo ha bisogno di un riferimento da cui partire
nell&rsquo;analisi degli intervalli e si differenzia dall&rsquo;orecchio assoluto che
invece di tale riferimento puÃ² fare a meno. Molte persone che mi conoscono mi
dicono: Â«ah, tu hai l&rsquo;orecchio assolutoÂ». No, il mio Ã¨ un orecchio relativo,
perchÃ© ho bisogno di un riferimento per orientarmi nel mondo dei suoni. Sembra
sia possibile esercitare l&rsquo;orecchio assoluto fino a una certa etÃ  e infatti
molte persone dotate di orecchio assoluto di mia conoscenza sono musicisti che
hanno iniziato molto presto da bambini. Tuttavia, alcuni studi recenti sembrano
dimostrare che Ã¨ possibile sviluppare l'<a href="https://www.biorxiv.org/content/early/2018/07/03/355933">orecchio
assoluto</a> anche in etÃ 
adulta.  Questo non toglie che la capacitÃ  di analisi dell&rsquo;orecchio relativo
non Ã¨ meno importante di quella dell&rsquo;orecchio assoluto.</p>
<p>Un&rsquo;altra cosa importante da tenere presente Ã¨ che il cervello apprende meglio
quando si trova nella cosiddetta learning zone (zona di apprendimento). In
altre parole, l&rsquo;esercizio non dev&rsquo;essere tanto facile da far annoiare il
cervello ma neanche troppo difficile da scoraggiarlo. Se in questa zona di
equilibrio tra facilissimo e impossibile immettiamo ogni tanto un elemento di
difficoltÃ  leggermente superiore alla media, il cervello apprende e
interiorizza piÃ¹ facilmente. Molti metodi di apprendimento hanno fatto loro
questa filosofia introducendo anche meccanismi di gamification, cioÃ¨ ad esempio
l&rsquo;esercizio prevede un punteggio da raggiungere e livelli di difficoltÃ 
progressiva da superare.</p>
<p>Oggi esistono tantissimi software che possono aiutarci a fare ear training.
Vorrei consigliarne uno che Ã¨ anche quello che uso quotidianamente e si chiama
<a href="https://www.myeartraining.net/">My Ear Training</a>. C&rsquo;Ã¨ una funzionalitÃ  di
dettato ritmico che trovo molto utile perchÃ© spesso si sottovaluta l&rsquo;aspetto
della durata del suono quando invece Ã¨ fondamentale nella costruzione di un
groove. Poi ci sono esercizi sia di tipo melodico che armonico e per ogni
esercizio si puÃ² scegliere la difficoltÃ . Ad esempio si puÃ² iniziare con gli
intervalli di terza e quinta e quando ci rendiamo conto di essere pronti, mano
a mano aggiungere quelli piÃ¹ difficili.</p>
<p>Vorrei menzionare <a href="http://amzn.eu/d/h3KGMxz">i libri del Venerabile Maestro Andrea
Avena</a>, i quali, oltre ad essere degli insostituibili
riferimenti in materia di teoria e armonia, contengono esercizi di dettati
ritmici e melodici su cd allegato.</p>
<p>Una menzione merita senz&rsquo;altro anche il libro Metodo Intensivo di Ear Training
di Vincenzo Maurogiovanni che Ã¨ possibile acquistare direttamente per pochi
euro contattandolo sulla sua <a href="https://www.facebook.com/vizmaurogiovanni">pagina Facebook</a>.</p>
<h2 id="come-ho-sviluppato-lorecchio">Come ho sviluppato l&rsquo;orecchio</h2>
<p>Qui si entra piÃ¹ che altro nel campo della curiositÃ  e dell&rsquo;aneddotica perchÃ©
vorrei raccontare come e perchÃ© ho sviluppato l&rsquo;orecchio. In altre parole, se
il suo scopo era informarti su come migliorare il tuo orecchio, potresti
fermarti tranquillamente qui e non perderesti nulla di particolarmente
importante. Se invece hai resistito eroicamente a questa valanga di testo in
un&rsquo;epoca in cui la soglia dell&rsquo;attenzione difficilmente supera la lunghezza di
un tweet, be'&hellip; continua pure a leggere.</p>
<p>Quando ero molto piccolo (stiamo parlando degli anni &lsquo;70), mio padre teneva
nella mia stanza il suo laboratorio di cianfrusaglie elettroniche e, fra
queste, non mancava un favoloso organo elettrico Ekosonic che lui aveva
ovviamente modificato per applicargli un sintetizzatore e, piÃ¹ tardi, anche una
batteria elettronica, entrambi rigorosamente auto-costruiti (anche perchÃ©
all&rsquo;epoca un Moog credo costasse quanto una casa).</p>
<p>Mentre giocavo nella mia stanzetta, specie nei fine settimana, ascoltavo papÃ 
suonare l&rsquo;organo e mi capitava spesso di sentirlo mentre cercava di imparare
una nuova canzone che poteva essere una vecchia melodia napoletana ma anche
l&rsquo;ultimo successo di uno dei cantanti dell&rsquo;epoca. PapÃ  iniziava suonando una
nota e, se la successiva non era quella giusta, la andava cercando per
tentativi. Il procedimento, nei casi piÃ¹ complicati, poteva durare anche una
mezz&rsquo;oretta ma alla fine papÃ  riusciva a trovare a orecchio tutte le note
giuste. Per gli accordi della canzone lo sentivo che andava in cerca dalla nota
piÃ¹ bassa e, quando l&rsquo;aveva trovata, procedeva a suonarne l&rsquo;accordo: una bella
triade in posizione base. PiÃ¹ tardi avrei capito che era davvero difficile
sbagliare l&rsquo;accordo dato che nel 98% delle canzoni le possibilitÃ  sono limitate
ad accordi maggiori e minori.</p>
<p>Insomma, papÃ  imparava a suonare un discreto numero di canzoni ed io avevo
capito quale era il suo procedimento. All&rsquo;epoca mi piaceva particolarmente la
melodia di una canzone di Memo Remigi di cui ho purtroppo dimenticato sia il
titolo che la melodia e papÃ , vedendomi smanettare all&rsquo;organo, pensÃ² di
appiccicavi dei numeri ai tasti e scrivermi la melodia su un pezzo di carta
sottoforma di sequenza di numeri.Â Probabilmente doveva aver visto una tastiera
Bontempi di quelle che un tempo si regalavano ai bambini e aveva pensato di
replicare il sistema Bontempi sul suo ben piÃ¹ serio organo Ekosonic.</p>
<p>Una volta imparata la melodia di Memo Remigi, volevo imparare sempre piÃ¹
canzoni e papÃ  naturalmente non aveva la pazienza e il tempo di scrivere tutta
quella roba per me. Non ci volle molto quindi che, seguendo il suo esempio,
cominciai ad imparare la musica a orecchio sul suo organo.</p>
<p>Quando imparai a leggere e scrivere, i miei pensarono di mandarmi a studiare il
pianoforte privatamente. Il maestro andÃ² con mio padre in un negozio a Sora e
una settimana dopo a casa mia comparÃ¬ un fantastico pianoforte
verticaleÂ Schulze Pollmann nero laccato. Iniziarono cosÃ¬ le mie lezioni di
pianoforte e solfeggio. Ero ancora troppo piccolo per capire l&rsquo;importanza della
disciplina, infatti il solfeggio era una palla mortale e le poche cose che
avevo imparato a suonare al pianoforte le avevo imparate piÃ¹ imitando il mio
maestro che leggendole sui libri. Insomma, dire che ero un pessimo studente
sarebbe un eufemismo. Ero praticamente una capra. Ma ero contento perchÃ© avevo
il mio pianoforte e potevo suonare a orecchio le canzoni che piacevano a me.</p>
<p>Tutto questo Ã¨ andato bene fin quando non ho cominciato ad incontrare canzoni
che mi davano piÃ¹ filo da torcere. Avevo iniziato ad ascoltare soprattutto Pino
Daniele e Lucio Dalla. C&rsquo;era sempre qualcosa in queste canzoni che non riuscivo
a capire fino in fondo. Questa condizione di incapacitÃ  mi dava un fastidio
fisico. Era proprio una sensazione di rabbia quella che avevo e quando andavo a
letto la sera, passavo un sacco di tempo nel letto al buio a immaginare la
tastiera del pianoforte e come sarebbe stato suonare quelle canzoni. C&rsquo;erano
parti che, se immaginavo di suonare, mi tornavano, cioÃ¨ mi aspettavo che
schiacciando certi tasti avrei prodotto esattamente quei suoni. C&rsquo;erano altre
parti dove non riuscivo ad arrivare e dovevo fermarmi. Allora provavo a
ragionare al contrario partendo dalla fine della canzone e andando a ritroso.
Il giorno dopo mi svegliavo e correvo al pianoforte per vedere se la soluzione
funzionava. Qualche volta mi riusciva, qualche volta no.</p>
<p>Insomma, passai cosÃ¬ tanto tempo ad esercitarmi con i tasti del mio pianoforte
mentale nel letto al buio la sera che alla fine non avevo neanche bisogno del
piano per verificare se la soluzione era giusta o meno: semplicemente la
suonavo nella mia testa e, se funzionava lÃ¬, voleva dire che avrebbe funzionato
anche su un pianoforte vero.</p>
<p>Il mio orecchio si Ã¨ sviluppato perchÃ© non avrei potuto vivere senza. Se c&rsquo;era
una pubblicitÃ  in televisione con un intervallo strano, potevo passare
un&rsquo;intera giornata a cercare di decifrarlo sul mio pianoforte mentale. In fondo
gli intervalli fondamentali si contano sulle dita di una mano e la musica che
ci circonda Ã¨ composta seguendo poche e ben consolidate consuetudini armoniche.</p>
<p>Quando poi alle scuole medie ho scoperto il jazz e ho capito che esisteva un
mondo in cui puoi scrivere la tua musica improvvisandola sul momento, be&rsquo;&hellip; lÃ¬
c&rsquo;Ã¨ stato l&rsquo;innamoramento fatale che continua tuttora.</p>
<p>Un aspetto curioso dell&rsquo;orecchio Ã¨ che non posso controllarlo. Se ad esempio
entro in un supermercato e gli altoparlanti stanno trasmettendo una musica, il
mio cervello si sintonizza automaticamente e la decifra piÃ¹ o meno in tempo
reale e non Ã¨ un processo che posso spegnere, non piÃ¹ di come si puÃ² smettere
di guardare il titolo di un libro in uno scaffale se non chiudendo gli occhi.
Credo cioÃ¨ che il tipo di riconoscimento che avviene nel mio cervello con i
suoni sia lo stesso che avviene ad esempio quando con la vista osserviamo un
oggetto: se sto guardando una macchina, so che quell&rsquo;oggetto Ã¨ una macchina,
non c&rsquo;Ã¨ un modo per non vedere l&rsquo;oggetto macchina se non chiudendo gli occhi.</p>
<p>Se ascolto un accordo maggiore, so istintivamente che quello Ã¨ un accordo
maggiore. Magari non so in che tonalitÃ  Ã¨ perchÃ© non ho un riferimento, ma sono
certo della qualitÃ  dell&rsquo;accordo perchÃ© per il mio udito il livello di
riconoscimento Ã¨ lo stesso di quello della vista nei confronti di un oggetto
concreto.</p>
<p>Il fatto di non avere un riferimento non Ã¨ affatto uno svantaggio, anzi. Ad
esempio, se mi trovo nella sala d&rsquo;aspetto di un dottore, posso decidere di
suonarmi in testa All The Things You Are in DO# minore solo per tenermi
occupato. A meno che non ci sia giÃ  una musica trasmessa da una radiolina. In
tal caso ad esempio provo a immaginare ogni chorus della canzone in una
tonalitÃ  diversa.</p>
<p>Questo non vuol dire che il mio orecchio sia magico. Tutt&rsquo;altro. So bene che
non c&rsquo;Ã¨ nulla di magico in tutte le ore che ho trascorso nella mia mente con il
mio piano. So anche che per trascrivere l&rsquo;assolo di un jazzista ho bisogno
dell&rsquo;ausilio di quei software che rallentano e ripetono l&rsquo;audio a comando.</p>
<p>Oggi mi esercito piÃ¹ che altro nel riconoscere le diverse qualitÃ  degli
accordi, gli intervalli al di fuori dell&rsquo;ottava e cerco (senza grossi
risultati, devo ammettere) di identificare e memorizzare melodie casuali con
piÃ¹ di 6 note.</p>
<p>Se mi hai letto fin qui, ti ringrazio per avermi ascoltato e sopportato. Spero
di averti convinto che l&rsquo;ear training non Ã¨ una materia esoterica e che, se sai
come affrontarlo, puoi usarlo a tuo vantaggio.</p>
<p>Infine vorrei rassicurare il mio psichiatra: non ho mai scritto unÂ quartetto
dâ€™archi in OH fenicio.</p>
]]></content>
        </item>
        
        <item>
            <title>ðŸ‡®ðŸ‡¹ Kind of papera che non galleggia</title>
            <link>https://mirkocaserta.com/posts/2018/10/kind-of-papera-che-non-galleggia/</link>
            <pubDate>Thu, 18 Oct 2018 14:01:00 +0000</pubDate>
            
            <guid>https://mirkocaserta.com/posts/2018/10/kind-of-papera-che-non-galleggia/</guid>
            <description>Â«In principio era il verbo.Â»
Â«Ah, io credevo il soggetto. Ma infatti, se senti il Maestro Yoda&amp;hellip;Â»
Â«Caserta, fai poco lo spiritoso che vojo vedÃ¨ come ve la cavate cor riscaldamento globale.Â»
Â«Eh vabbÃ¨, moriremo tutti, che vuoi che sia? Mica sarebbe la prima volta.Â»
(a bassa voce): &amp;ldquo;Questo moo mettete nel terzo girone.Â»
Â«Guarda che t&amp;rsquo;ho sentito, sa? Al terzo girone1 so&#39; tutti amici miei. Come niente t&amp;rsquo;arrivo in finale e vinco ai rigori.</description>
            <content type="html"><![CDATA[<p>Â«In principio era il verbo.Â»</p>
<p>Â«Ah, io credevo il soggetto. Ma infatti, se senti il Maestro Yoda&hellip;Â»</p>
<p>Â«Caserta, fai poco lo spiritoso che vojo vedÃ¨ come ve la cavate cor
riscaldamento globale.Â»</p>
<p>Â«Eh vabbÃ¨, moriremo tutti, che vuoi che sia? Mica sarebbe la prima volta.Â»</p>
<p>(a bassa voce): &ldquo;Questo moo mettete nel terzo girone.Â»</p>
<p>Â«Guarda che t&rsquo;ho sentito, sa? Al terzo girone<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> so'
tutti amici miei. Come niente t&rsquo;arrivo in finale e vinco ai rigori. Lo sai come
siamo fatti noi italiani&hellip;Â»</p>
<p>(a bassissima voce): Â«Chiamame &lsquo;n po&rsquo; er canaro che c&rsquo;ho un lavoretto per lui.Â»</p>
<p>Â«Mi scusi Eminenza&hellip;Â»</p>
<p>Â«Non me chiamÃ  Eminenza che quello Ã¨ n&rsquo;artro che te lo raccomando proprio.Â»</p>
<p>Â«Come la devo chiamare?Â»</p>
<p>Â«Miles va bene. Ãˆ informale ma incute ancora un certo timore.Â»</p>
<p>Â«Senta, signor Miles, qua i musicisti stanno tutti a morÃ¬ de fame.Â»</p>
<p>Â«Figliolo, io tutto quello che potevo fÃ  l&rsquo;ho fatto.Â»</p>
<p>Â«Eh, lo so, ma infatti pe' caritÃ , chi te dice niente? Anche se tutta quella
roba pop&hellip;Â»</p>
<p>Â«Lo vedi che &lsquo;n c&rsquo;hai capito niente?Â»</p>
<p>Â«Lo so, lo so, ma infatti sto a studiÃ  un po&rsquo; di tutto, eh.Â»</p>
<p>Â«Bravo, vai a studiÃ  un po' di tutto, va.Â»</p>
<p>Â«Signor Miles, ma tutto tutto? Pure Nino D&rsquo;Angelo?Â»</p>
<p>Â«A parte che a me Nino D&rsquo;Angelo me piace, lo sanno tutti. Ma perchÃ©, se te
paga, che fai, non ce vai?Â»</p>
<p>Â«A voja! Ma magari.Â»</p>
<p>Â«Bravo! Allora vai, va! E continua a studiÃ  che su Giant Steps in 13/8 te sento
ancora un po' indeciso.Â»</p>
<p>Â«Ma a me &lsquo;sti tempi dispari non Ã¨ che me convincono troppo.Â»</p>
<p>Â«Ma stai a scherzÃ ? L&rsquo;hai sentito quel ragazzetto? Bread&hellip;Â»</p>
<p>Â«&hellip;Mehldau, sÃ¬. Che poi &lsquo;nsomma, non Ã¨ piÃ¹ tanto un ragazzetto manco lui.Â»</p>
<p>Â«Ma quello te fa All The Things in 7/4 che t&rsquo;esplode l&rsquo;auditorium.Â»</p>
<p>Â«Se Ã¨ per questo ce stanno certi ragazzetti su youtube che aiutame a dÃ¬ levate
proprio.Â»</p>
<p>Â«Bravo. Lo vedi che hai capito?Â»</p>
<p>Â«Ho capito, sÃ¬. Me tocca imparÃ  pure &lsquo;sti tempi dispari, eh?Â»</p>
<p>Â«E vedi un po&rsquo; te!Â»</p>
<p>Â«Signor Miles, me sa che era meglio che non la disturbavo.Â»</p>
<p>Â«Eh, ormai (&hellip;) Sai che c&rsquo;Ã¨? GiÃ  che stai qua, vai un po&rsquo; a trovÃ  quel
bassista un po&rsquo; matto. Te fai dÃ  &lsquo;na lezione.Â»</p>
<p>Â«Signor Miles, ma Ã¨ vero che qua state sempre a fÃ  jam session? A me dopo cena
me viÃ¨ l&rsquo;abbiocco. Questi suonano fino all&rsquo;alba, li mortacci loro.Â»</p>
<p>Â«Devi mangiÃ  leggero, fjo mio.Â»</p>
<p>Â«Signor Miles, ma perchÃ© parla romano?Â»</p>
<p>Â«Qua se possono studiÃ  le lingue e siccome io sÃ² sempre stato un po&rsquo; coatto&hellip;
me piaceva il romano, vabbÃ¨?Â»</p>
<p>Â«VabbÃ¨, vabbÃ¨, non te &lsquo;ncazzÃ . Grazie Signor Miles.Â»</p>
<p>Â«E non me chiamÃ  Signor Miles.Â»</p>
<p>Â«Va bene, Signor Miles. MÃ² devo proprio scappÃ , ciao.Â»</p>
<p>Â«Ciao secco.Â»</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>terzo girone: bestemmiatori, sodomiti, usurai e musicisti <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
        </item>
        
        <item>
            <title>ðŸ‡ºðŸ‡¸ An Introduction to Time Representation, Serialization and Management in Software</title>
            <link>https://mirkocaserta.com/posts/2013/04/an-introduction-to-time-representation-serialization-and-management-in-software/</link>
            <pubDate>Mon, 15 Apr 2013 14:19:00 +0000</pubDate>
            
            <guid>https://mirkocaserta.com/posts/2013/04/an-introduction-to-time-representation-serialization-and-management-in-software/</guid>
            <description>Most issues in software development usually arise from poor, inconsistent knowledge of the domain at hand. A topic apparently as simple as time representation, serialization and management can easily cause a number of problems both to the neophyte and to the experienced programmer.
In this post, we&amp;rsquo;ll see that there&amp;rsquo;s no need to be a Time Lord to grasp the very simple few concepts needed not to incur into time management hell.</description>
            <content type="html"><![CDATA[<p>Most issues in software development usually arise from poor,
inconsistent knowledge of the domain at hand. A topic apparently as
simple as time representation, serialization and management can easily
cause a number of problems both to the neophyte and to the experienced
programmer.</p>
<p>In this post, we&rsquo;ll see that there&rsquo;s no need to be a
<a href="http://en.wikipedia.org/wiki/Time_Lord">Time Lord</a> to grasp the
very simple few concepts needed not to incur into time management hell.</p>
<p><img src="/images/posts/time.jpg" alt="Time doesn&rsquo;t exist. Clocks exist."></p>
<h2 id="representation">Representation</h2>
<p>A question as simple as <em>&ldquo;What time is it?&quot;</em> assumes a number of
contextual subleties that are obvious to the human brain, but become
absolute nonsense for a computer.</p>
<p>For instance, if you were asking to me what time is it right now, I
might say: <em>&ldquo;It&rsquo;s 3:39&rdquo;</em> and, if you were a colleague in my office,
that&rsquo;d be enough information to infer that it&rsquo;s 3:39pm CEST. That&rsquo;s
because you would already be in possession of some bits of important
contextual information such as</p>
<ul>
<li>it&rsquo;s an afternoon because we&rsquo;ve already had lunch</li>
<li>we&rsquo;re in Rome, therefore our timezone is Central European Time (CET)
or Central European Summer Time (CEST)</li>
<li>we&rsquo;ve switched to daylight savings time a few weeks earlier, so the
current timezone must be Central European Summer Time</li>
</ul>
<p><em>3:39</em> only happens to be a convenient representation of time as long as
we&rsquo;re in possession of the contextual bits.  In order to represent time
in an universal way, you should have an idea what
<a href="http://en.wikipedia.org/wiki/Coordinated_Universal_Time">UTC</a> and
<a href="http://en.wikipedia.org/wiki/Time_zone">timezones</a> are.</p>
<p>Now, suppose I have to schedule a skype chat with a fellow software
developer in the US. I could write him an email and say something along
the lines of <em>&ldquo;see you on 2/3&rdquo;</em>. In Italy, that would be the second day
in the month of march, but to an US person, that would be the third day
in the month of february. As you can see, how our chat is never going to
happen.</p>
<p>These are only a few examples of the kind of issues that might arise
when representing date and time information. Luckily enough, there is a
solution to the representation conundrums, namely the
<a href="http://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> standard.</p>
<p>Just to give you an example, in ISO 8601, <code>1994-11-05T08:15:30-05:00</code>
corresponds to November 5, 1994, 8:15:30 am, US Eastern Standard Time.
<code>1994-11-05T13:15:30Z</code> corresponds to the same instant (the <code>Z</code> stands
for UTC). Same instant, different representations.</p>
<p>The ISO 8601 standard also has the nice side effect of providing natural
sorting in systems that use lexicographical order (such as filesystems)
because information is organized from most to least significant, i.e.
year, month, day, hour, minute, second, fraction of a second.</p>
<p>Even if you&rsquo;re only dealing with local times in your software, you
should know that, unless you also display the time zone, you can never
be sure of the time. I cannot remember how many times a developer has
asked me to <em>fix the time</em> on the server, only to discover that his
software was printing time in UTC.</p>
<p>At display time, it is okay to deal with partial representation of time
because the user experience requires so. Just make sure, when debugging,
to print out the whole set of information, including the time zone,
otherwise you can never be sure what you&rsquo;re looking at is what you
actually think it is.</p>
<p>Although a given moment in time is immutable, there is an arbitrary
number of ways to express it. And we&rsquo;ve not even talked about the Julian or
Indian calendars or stuff like expressing durations!</p>
<p>Let me summarize a few key points to bring home so far:</p>
<ul>
<li>get to know <a href="http://en.wikipedia.org/wiki/Time_zone">time zones</a> and
<a href="http://en.wikipedia.org/wiki/Coordinated_Universal_Time">UTC</a></li>
<li><a href="http://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> is your friend</li>
<li>always print the time zone while debugging</li>
</ul>
<p><img src="/images/posts/bttf-clock.png" alt="Back to the future clock"></p>
<h2 id="serialization">Serialization</h2>
<p>Speaking of software, serialization is a process where you take an object&rsquo;s
status and spell it out in such a way that it can be later entirely rebuilt,
exactly like the original, by using the spelt out (serialized) information.
Think of an xml or json file:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;person&#34;</span>: {
    <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Mirko&#34;</span>,
    <span style="color:#f92672">&#34;surname&#34;</span>: <span style="color:#e6db74">&#34;Caserta&#34;</span>,
    <span style="color:#f92672">&#34;class&#34;</span>: <span style="color:#e6db74">&#34;nerd&#34;</span>
  }
}
</code></pre></div><p>This is the serialized form of a peculiar imaginary person class instance.</p>
<p>In the binary world of computers, time is usually serialized and stored
by using the <a href="http://en.wikipedia.org/wiki/Unix_time">Unix time</a>
convention. As I&rsquo;m writing this, my Unix time is <code>1366191727 UTC</code>. That
is: <code>1366191727</code> seconds have passed since January 1st, 1970 at 00:00
UTC. Isn&rsquo;t that a pretty clever, consistent and compact way of
representing a plethora of information, such as <code>April 17 2013 @ 11:42:07am CEST</code>?</p>
<p>Unix time is only another arbitrary representation of a given moment in time,
although a not very human readable one. But you can take that number, write it
on a piece of paper, stick it onto a carrier pigeon, and your recipient would
be able to decipher your vital message by simply turning to the Internet and
visiting a site such as <a href="http://www.unixtimestamp.com/">unixtimestamp.com</a> or
<a href="https://currentmillis.com/">currentmillis.com</a>.</p>
<p>Just like you can write that number on a piece of paper and later get
back the full instant back to life, you can store it in a file or a
row in your favorite RDBMS. Although you might want to talk to your
RDBMS using a proper driver and handing it a plain date instance; your
driver will then take care of the conversion to the underlying database
serialization format for native time instances.</p>
<p>By storing time using a native format, you get the nice time formatting,
sorting, querying, etc features of your RDBMS for free, so you might want to
think twice before storing plain Unix timestamps in, say, Oracle.</p>
<p>Just make sure you know what timezone your Unix timestamp refers to, or
you might get confused later at deserialization time.</p>
<p>ISO 8601 is also a serialization favorite. In fact, it is used in the <a href="http://www.w3.org/TR/xmlschema-2/#isoformats">XML
Schema</a> standard.  Most xml
frameworks are natively able to serialize and deserialize back and forth from
<code>xs:date</code>, <code>xs:time</code> and <code>xs:dateTime</code> to your programming language&rsquo;s native
format (and viceversa). The same is true for json. Just be careful when dealing
with partial representations: for instance, if you omit the time zone, make
sure you agree beforehand on a default one with your communicating party
(usually UTC or your local time zone if you&rsquo;re both in the same one).</p>
<p><img src="/images/posts/mars-timezone.png" alt="Elon Musk: &ldquo;I&rsquo;m putting people on Mars!&rdquo;, Developers: &ldquo;Fantastic, moretimezones to support&rdquo;."></p>
<h2 id="management">Management</h2>
<p>First of all, if you think you can write your own time management
software library, or even write a little routine that adds or subtracts
arbitrary values from the time of the day,
please allow me to show you the source code for the
<a href="http://www.docjar.com/html/api/java/util/Date.java.html">java.util.Date</a>
and
<a href="http://www.docjar.com/html/api/java/util/GregorianCalendar.java.html">java.util.GregorianCalendar</a>
classes from JDK 7, respectively weighting 1331 and 3179 lines of code.</p>
<p>Okay, these are probably not the best examples of software routines that
deal with time, I agree. That&rsquo;s why Java libraries like
<a href="http://joda-time.sourceforge.net/">Joda Time</a> were written.
In fact, Joda Time has become so popular that it gave birth to
<a href="http://jcp.org/en/jsr/detail?id=310">JSR-310</a> and is
<a href="http://www.h-online.com/open/news/item/JSR-310-s-Date-and-Time-API-added-to-JDK-8-1708647.html">now</a>
<a href="http://www.infoq.com/news/2013/02/java-time-api-jdk-8">part</a> of JDK 8.</p>
<p>Use of popular, well designed and implemented time frameworks will save your
life. Seriously. Take your time to get familiar with the API of your choosing.</p>
<p><img src="/images/posts/timezones-meme.png" alt="Friend: &ldquo;What happened?&rdquo;, Me: &ldquo;I had to work with timezonestoday&rdquo;."></p>
<h2 id="further-resources">Further Resources</h2>
<p>Here are a few useful links I&rsquo;ve accumulated over time:</p>
<ul>
<li><a href="https://zachholman.com/talk/utc-is-enough-for-everyone-right">UTC is enough for everyone&hellip; right?</a></li>
<li><a href="https://youtu.be/-5wpm-gesOY">The Problem with Time &amp; Timezones - Computerphile</a></li>
<li><a href="http://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time">Falsehoods programmers believe about time</a></li>
<li><a href="http://apiux.com/2013/03/20/5-laws-api-dates-and-times/">The 5 laws of API dates and times</a></li>
<li><a href="http://derickrethans.nl/storing-date-time-in-database.html">Storing Date/Times in Databases</a></li>
<li><a href="https://medium.com/techtofreedom/5-levels-of-handling-date-and-time-in-python-46b601e47f65">5 Levels of Handling Date and Time in Python</a></li>
<li><a href="https://blog.wesleyac.com/posts/timezone-bullshit">Timezone Bullshit</a></li>
<li><a href="https://kirby.kevinson.org/blog/iso-8601-the-better-date-format/">ISO 8601: the better date format</a></li>
<li><a href="http://youtu.be/kzprsR2SvrQ">A Short History of the Modern Calendar</a></li>
<li><a href="https://yro.slashdot.org/story/21/03/14/014233/should-we-heed-the-science-and-abolish-daylight-saving-time">Should We &lsquo;Heed the Science and Abolish Daylight Saving Time&rsquo;?</a></li>
<li><a href="http://opensourcehacker.com/2013/03/28/converting-world-timezones-with-duckduckgo-and-wolfram-alpha/">Converting world timezones with DuckDuckGo and Wolfram Alpha from the browser address bar</a></li>
<li><a href="https://www.si.com/extra-mustard/2013/12/30/the-extra-mustard-trivia-hour-when-a-calendar-defeated-russia-in-the-1908-olympics">When a Calendar Defeated Russia in the 1908 Olympics</a></li>
<li><a href="https://www.infobloom.com/why-does-china-have-only-one-time-zone.htm">Why does China Have Only One Time Zone?</a></li>
<li><a href="https://www.reddit.com/r/ProgrammerHumor/comments/l99ip9/or_is_it_0th/">First day meme</a></li>
<li><a href="https://www.reddit.com/r/ISO8601/">Glory to ISO8601 Subreddit</a></li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
